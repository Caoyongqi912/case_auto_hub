#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/8/25# @Author : cyq# @File : test_case# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.mapper.caseHub.testcaseMapper import TestCaseMapper, TestCaseStepMapperfrom app.schema.hub.testCaseSchema import *from app.controller import Authenticationfrom app.model.base import Userfrom app.response import Responsefrom utils import logrouter = APIRouter(prefix="/hub/cases", tags=['用例'])@router.post("/insert", description="添加用例")async def insert_case(data: AddTestCaseSchema, user: User = Depends(Authentication())):    log.info(data)    data = await TestCaseMapper.save_case(cr=user,                                          **data.model_dump(exclude_unset=True))    return Response.success(data)@router.post("/update", description="修改用例")async def update_case(data: UpdateTestCaseSchema, ur: User = Depends(Authentication())):    log.info(data)    await TestCaseMapper.update_case(ur=ur, **data.model_dump(exclude_unset=True, exclude_none=True))    return Response.success()@router.get("/queryByReqId", description="用例列表")async def list_case(data: QueryTestCaseSchemaByReq = Depends(), _: User = Depends(Authentication())):    data = await TestCaseMapper.query_by_req(data.requirementId)    return Response.success(data)@router.get("/remove", description="删除用例")async def remove_case(case_id: int, _: User = Depends(Authentication())):    return Response.success()@router.get("/removeStep", description="删除用例")async def remove_case_step(stepId: int, _: User = Depends(Authentication())):    await TestCaseStepMapper.delete_by_id(stepId)    return Response.success()@router.post("/copy", description="复制")async def copy_case(data: CopyCase, _: User = Depends(Authentication())):    await TestCaseMapper.copy_case(user=_, **data.model_dump())    return Response.success()@router.post("/copyStep", description="复制")async def copy_case_step(data: CopyCaseStep, _: User = Depends(Authentication())):    await TestCaseStepMapper.copy_step(user=_, **data.model_dump())    return Response.success()@router.post("/reorder", description="用例排序")async def reorder_case(data: ReorderCase, _: User = Depends(Authentication())):    await TestCaseMapper.reorder_case(**data.model_dump())    return Response.success()@router.post("/reorderSupStep", description="用例步骤排序")async def reorder_case_step(data: ReorderCaseStep, _: User = Depends(Authentication())):    await TestCaseStepMapper.reorder_steps(**data.model_dump())    return Response.success()@router.get("/querySubSteps/{caseId}", description="用例查询步骤")async def query_sub_steps(caseId: int, _: User = Depends(Authentication())):    steps = await TestCaseMapper.query_sub_steps(caseId)    return Response.success(steps)@router.post("/setSubSteps", description="用例维护步骤")async def set_sub_steps(steps: SetTestCaseSubStepSchema, user: User = Depends(Authentication())):    await TestCaseMapper.set_case_steps(**steps.model_dump(exclude_unset=True),                                        user=user)    return Response.success()