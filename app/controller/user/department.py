#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/25# @Author : cyq# @File : department# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.exception import AuthErrorfrom app.mapper.user import UserMapperfrom app.model.base import Userfrom app.response import Responsefrom app.mapper.user.departmentMapper import DepartmentMapper, DepartTagMapperfrom app.schema.base.departSchema import *router = APIRouter(prefix="/department", tags=["部门"])async def check_permission(department_id: int, user: User):    # 非管理 非部门负责    depart = await DepartmentMapper.get_by_id(ident=department_id)    if depart.admin_id != user.id:        if user.isAdmin is False:            raise AuthError("无权操作")@router.get("/query", description="部门表")async def query_department(_: User = Depends(Authentication())):    data = await DepartmentMapper.query_all()    return Response.success(data)@router.post("/page", description="部门表")async def page_department(values: PageDepartmentSchema, _: User = Depends(Authentication())):    data = await DepartmentMapper.page_query(        **values.model_dump(exclude_unset=True, exclude_none=True)    )    return Response.success(data)@router.post("/insert", description="添加部门")async def insert_department(department: InsertDepartmentSchema, user=Depends(Authentication(isAdmin=True))):    await DepartmentMapper.save(        creatorUser=user,        **department.model_dump(exclude_unset=True)    )    return Response.success()@router.post("/update", description="更新部门")async def update_department(department: UpdateDepartmentSchema, user: User = Depends(Authentication())):    await check_permission(department.id, user)    await DepartmentMapper.update_by_id(        updateUser=user,        **department.model_dump(exclude_unset=True, exclude_none=True)    )    return Response.success()@router.post("/remove", description="删除部门")async def remove_department(department: GetDepartmentSchema, user: User = Depends(Authentication(isAdmin=True))):    await check_permission(department.id, user)    await DepartmentMapper.delete_by_id(        ident=department.id    )    return Response.success()@router.post("/queryUser", description="部门用户")async def query_user(department: GetDepartmentSchema, _: User = Depends(Authentication(isAdmin=True))):    data = await UserMapper.query_by(        department_id=department.id    )    return Response.success(data)@router.get("/queryTags", description="部门标签")async def query_tag(depart_id: int, _: User = Depends(Authentication())):    data = await DepartTagMapper.query_by(depart_id=depart_id)    return Response.success(data)@router.post("/addTags", description="部门标签")async def add_tag(tag: AddDepartTagSchema, user: User = Depends(Authentication())):    await DepartTagMapper.save(        creatorUser=user,        **tag.model_dump(exclude_unset=True)    )    return Response.success()@router.post("/updateTag", description="部门标签")async def update_tag(tag: UpdateDepartTagSchema, _: User = Depends(Authentication())):    await DepartTagMapper.update_by_id(        updateUser=_,        **tag.model_dump(exclude_unset=True, exclude_none=True)    )    return Response.success()@router.post("/removeTag", description="部门标签")async def remove_tag(tag: RemoveDepartTagSchema, _: User = Depends(Authentication())):    await DepartTagMapper.delete_by_id(        ident=tag.tag_id    )    return Response.success()