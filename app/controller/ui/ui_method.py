#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/1/21# @Author : cyq# @File : ui_method# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.ui.uiMethodMapper import UIMethodMapperfrom app.response import Responsefrom app.schema.ui import PageMethodSchema, OptMethodSchema, AddMethodSchema, UpdateMethodSchemarouter = APIRouter(prefix="/ui/config/method", tags=['ui自定义方法'])@router.post('/page', description="分页")async def method_page(pageInfo: PageMethodSchema, _=Depends(Authentication())):    pageInfo = await UIMethodMapper.page_query(        **pageInfo.model_dump(exclude_none=True, exclude_unset=True)    )    return Response.success(pageInfo)@router.get('/detail', description="详情")async def method_detail(me: OptMethodSchema, _=Depends(Authentication())):    method = await UIMethodMapper.get_by_uid(me.uid)    return Response.success(method)@router.get("/list", description="列表")async def method_list(_=Depends(Authentication())):    methods = await UIMethodMapper.query_all()    return Response.success(methods)@router.post("/add", description="新增")async def add_method(method: AddMethodSchema, cr=Depends(Authentication())):    await UIMethodMapper.save(        creatorUser=cr,        **method.model_dump()    )    return Response.success()@router.post("/update", description="修改")async def update_method(method: UpdateMethodSchema, ur=Depends(Authentication())):    await UIMethodMapper.update_by_uid(        updateUser=ur,        **method.model_dump(exclude_none=True, exclude_unset=True)    )    return Response.success()@router.post("/remove", description="删除")async def remove_method(me: OptMethodSchema, _=Depends(Authentication())):    await UIMethodMapper.delete_by_uid(me.uid)    return Response.success()