#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/1/21# @Author : cyq# @File : ui_env# @Software: PyCharm# @Desc:from fastapi import APIRouterfrom fastapi.params import Dependsfrom app.controller import Authenticationfrom app.model.base import Userfrom app.response import Responsefrom app.mapper.ui.uiEnvMapper import UIEnvMapperfrom app.schema.base.env import PageEnvSchemafrom app.schema.ui import AddEnvSchema, SetEnvSchemarouter = APIRouter(prefix="/ui/config/env", tags=['自动化用例'])@router.post("/add", description="新增环境")async def add_env(env: AddEnvSchema, cr: User = Depends(Authentication())):    await UIEnvMapper.save(        creatorUser=cr,        **env.model_dump()    )    return Response.success()@router.post("/edit", description="修改")async def edit_env(env: SetEnvSchema, cr: User = Depends(Authentication())):    await UIEnvMapper.update_by_uid(        updateUser=cr,        **env.model_dump(exclude_none=True, exclude_unset=True)    )    return Response.success()@router.get("/query", description="查询环境")async def env_query(_=Depends(Authentication())):    envs = await UIEnvMapper.query_all()    return Response.success(envs)@router.get("/detail", description="环境详情")async def env_detail(env: SetEnvSchema, _=Depends(Authentication())):    env = await UIEnvMapper.get_by_uid(env.uid)    return Response.success(env)@router.post("/page", description="环境分页")async def env_page(env: PageEnvSchema, _=Depends(Authentication())):    page = await UIEnvMapper.page_query(**env.model_dump(exclude_unset=True, exclude_none=True))    return Response.success(page)