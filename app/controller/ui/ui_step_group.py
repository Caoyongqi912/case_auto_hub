#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/10/16# @Author : cyq# @File : ui_group# @Software: PyCharm# @Desc: UI 步骤步骤组crudfrom fastapi import APIRouter, Dependsfrom app.mapper.ui.uiCaseStepGroupMapper import UICaseStepGroupMapperfrom app.response import Responsefrom app.schema.ui.uiStepGroup import *router = APIRouter(prefix="/ui/step/group", tags=['自动化步骤组'])@router.post("/add", description="添加步骤组")async def add_group(groupInfo: AddStepGroupSchema):    await UICaseStepGroupMapper.save(**groupInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success()@router.post("/addSteps", description="组通过步骤编号添加步骤")async def addSteps(StepsInfo: GroupAddStepList):    await UICaseStepGroupMapper.addStepList(**StepsInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success()@router.post("/removeStep", description="移除步骤")async def removeStep(stepInfo: RemoveStepFromGroupSchema):    await UICaseStepGroupMapper.remove_group_step_by_id(**stepInfo.model_dump())    return Response.success()@router.post('/newStep', description="保存用例、关联组")async def save_step(stepInfo: AddStep2GroupSchema):    await UICaseStepGroupMapper.addStep(**stepInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success()@router.post('/orderStep', description="步骤组重新排序")async def order_step(stepInfo: OrderStepGroupSchema):    await UICaseStepGroupMapper.order_steps_by_groupId(**stepInfo.model_dump())    return Response.success()@router.get("/querySteps", description="获取步骤组")async def get_group(groupId: int):    data = await UICaseStepGroupMapper.query_steps_by_groupId(groupId)    return Response.success(data)@router.post("/update", description="修改步骤组")async def put_group(groupInfo: PutStepGroupSchema):    await UICaseStepGroupMapper.update_by_uid(**groupInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success()@router.post("/delete", description="删除步骤组")async def del_group(groupInfo: DeleteStepGroupSchema):    await UICaseStepGroupMapper.delete_by_id(**groupInfo.model_dump())    return Response.success()@router.get("/page", description="步骤组分页")async def page_group(groupInfo: PageStepGroupSchema = Depends()):    data = await UICaseStepGroupMapper.page_query(**groupInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success(data)