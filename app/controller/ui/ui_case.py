#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : ui_case# @Software: PyCharm# @Desc:import asynciofrom app.mapper.ui.uiCaseResultMapper import UICaseResultMapperfrom utils import GenerateTools, logfrom fastapi import APIRouter, Dependsfrom app.response import Responsefrom app.mapper.ui.uiCaseMapper import UICaseMapper, UICaseStepApiMapper, UICaseStepMapper, UICaseStepSQLMapperfrom app.mapper.ui.uiCaseVariableMapper import UICaseVariableMapperfrom app.schema.ui import *router = APIRouter(prefix="/ui/case", tags=['自动化用例'])@router.post("/add/groupStep", description="用例关联公共步骤组")async def add_group_step(groupStep: AddUICaseStepWithGroup):    await UICaseMapper.add_group_step(**groupStep.dict())    return Response.success()@router.post("/delete", description="删除用例")async def delete_case(uid: str):    """    删除用例    :param uid:    :return:    """    await UICaseMapper.delete_by_uid(uid)    return Response.success()@router.post("/page", description="分页查询")async def page_cases(search: UICasePage):    """    分页查询    :param search:    :return:    """    log.debug(search)    data = await UICaseMapper.page_query(**search.dict(exclude_none=True,                                                       exclude_unset=True))    return Response.success(data)@router.get("/step/page", description="用例步骤分页查询")async def page_steps(search: PageUICaseStep = Depends()):    """    分页查询    :param search:    :return:    """    data = await UICaseStepMapper.page_query(**search.dict(exclude_none=True, exclude_unset=True))    return Response.success(data)@router.get("/step/query", description="用例步骤分页查询")async def query_steps(id: int):    """    query_steps    :return:    """    data = await UICaseStepMapper.query_steps_by_caseId(caseId=id)    return Response.success(data)@router.get("/query", description="查询用例")async def query_cases() -> Response:    """    查询所有用例    """    cases = await UICaseMapper.query_all()    return Response.success(cases)@router.post("/step/addCommonStep", description="添加公共步骤")async def add_common_step(stepInfo: AddUICaseStep):    log.debug(f"add = {stepInfo.dict(exclude_none=True,exclude_unset=True)}")    await UICaseStepMapper.save(**stepInfo.dict(        exclude_none=True,        exclude_unset=True    ))    return Response.success()@router.post("/step/delStep", description="删除步骤")async def del_step(stepInfo: DeleteUICaseStepByUID):    await UICaseStepMapper.delete_by_uid(**stepInfo.dict())    return Response.success()@router.post("/step/putStep", description="修改步骤")async def put_step(stepInfo: PutUICaseStep):    await UICaseStepMapper.update_by_id(**stepInfo.dict(        exclude_none=True,        exclude_unset=True    ))    return Response.success()@router.get("/queryByField", description="通过字段查询用例")async def query_cases_by_field(fields: UICaseField = Depends()):    """    通过字段查询    :param fields:    :return:    """    cases = await UICaseMapper.query_by(**fields.dict(        exclude_none=True,        exclude_unset=True    ))    return Response.success(cases)@router.get("/queryByDate", description="通过日期查询用例")async def query_cases_by_date(begin_date: str,                              end_date: str = GenerateTools.getTime(2)):    """    通过时间查询    :param begin_date: 开始时间    :param end_date: 结束时间    :return:    """    cases = await UICaseMapper.query_case_by_date(begin_date, end_date)    return Response.success(cases)@router.get("/countByDate", description="按照日期统计新增")async def countByDate(projectId: int, st: str = GenerateTools.getMonthFirst(), et: str = GenerateTools.getTime(2)):    """    统计新增用例    :param projectId:projectId    :param st    :param et    """    data = await UICaseMapper.count_case_by_date(projectId, st, et)    return Response.success(data)@router.get("/queryByCasePartParentId", description="通过父模块查询")async def queryByCasePartParentId(parentId: int):    """    夫模块查询、查询出所有子模块的用例    :param parentId: 父亲模块ID    :return:    """    cases = await UICaseMapper.query_case_part(parentId)    return Response.success(cases)@router.get("/queryCaseStepsByCaseId", description="通过用例ID查询步骤")async def queryCaseStepsByCaseId(caseId: int):    steps = await UICaseMapper.query_steps_by_caseId(caseId)    return Response.success(steps)@router.get("/getCaseByCaseId", description="用例查询")async def findByCaseId(caseId: int):    case = await UICaseMapper.get_by_id(caseId)    return Response.success(case)@router.post("/executeCaseById", description="用例执行")async def executeCaseById(caseId: int, userId: int):    from play import Player    asyncio.create_task(Player().run_case(caseId, userId))    return Response.success()@router.post("/add/stepApi", description="添加步骤API")async def add_api(api: AddUICaseStepApi):    """    添加步骤API    """    await UICaseStepApiMapper.insert(**api.dict(exclude_none=True))    return Response.success()@router.post("/update/stepApi", description="修改步骤API")async def update_api(api: UpdateUICaseStepApi):    """    修改步骤API    """    await UICaseStepApiMapper.update_by_uid(**api.dict(exclude_none=True))    return Response.success()@router.post("/delete/stepApi", description="修改步骤API")async def delete_api(api: DeleteUICaseStepApi):    """    删除步骤API    """    await UICaseStepApiMapper.deleted(**api.dict(exclude_none=True))    return Response.success()@router.get("/stepAPIInfo", description="通过步骤ID查询步骤API")async def getStepAPIInfo(stepId: int):    data = await UICaseStepApiMapper.get_by(stepId=stepId)    return Response.success(data)@router.get("/countByProjectId", description="通过项目查询各个模块用例数量")async def countByProjectId(projectId: int):    data = await UICaseMapper.count_by_projectId(projectId)    return Response.success(data)@router.post("/variable/add", description="添加前置变量")async def add_extract(var: InsertUICaseVariable):    """    添加前置变量    """    await UICaseVariableMapper.insert(**var.dict())    return Response.success()@router.get("/variable/page", description="通过caseId查询")async def query_extract(pageInfo: UIVariablesPage = Depends()):    """    通过caseId查询    """    log.info(pageInfo)    data = await UICaseVariableMapper.page_query(**pageInfo.dict(exclude_none=True))    return Response.success(data)@router.post("/variable/delete", description="删除前置变量")async def query_extract(body: GetOrDeleteUICaeVariable):    """    通过caseId查询    """    await UICaseVariableMapper.delete_by_uid(uid=body.uid)    return Response.success()@router.post("/variable/update", description="更新前置变量")async def update_extract(variable: UpdateUICaseVariable):    """    更新变量    """    await UICaseVariableMapper.update_by_uid(**variable.dict(exclude_none=True))    return Response.success()@router.get("/case_result_detail", description="用例结果详情")async def get_case_result(uid: str):    result = await UICaseResultMapper.get_by_uid(uid)    return Response.success(result)@router.get("/clear_result", description="清空调试历史")async def clear_result(caseId: int):    await UICaseResultMapper.clear_case_result(caseId=caseId)    return Response.success()@router.post("/add/stepSQL", description="添加SQL执行")async def add_sql(sql: AddUICaseStepSql):    await UICaseStepSQLMapper.insert(**sql.dict(exclude_none=True, exclude_unset=True))    return Response.success()@router.get("/stepSQLInfo", description="通过步骤ID查询步骤SQL")async def getStepSQLInfo(stepId: int):    data = await UICaseStepSQLMapper.get_by(stepId=stepId)    return Response.success(data)@router.post("/update/stepSql", description="修改步骤SQL")async def update_sql(sql: UpdateUICaseStepSql):    """    修改步骤SQL    """    await UICaseStepSQLMapper.update_by_uid(**sql.dict(exclude_none=True))    return Response.success()@router.post("/delete/stepSql", description="删除步骤Sql")async def delete_sql(sql: DeleteUICaseStepApi):    """    删除步骤SQL    """    await UICaseStepSQLMapper.deleted(**sql.dict(exclude_none=True))    return Response.success()