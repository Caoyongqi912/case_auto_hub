#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : ui_task# @Software: PyCharm# @Desc:import asynciofrom fastapi import APIRouter, Dependsfrom app.response import Responsefrom app.mapper.ui.uiTaskMapper import UITaskMapperfrom app.scheduler import Schedulerfrom app.schema.ui import *from play.player import run_Tasksfrom utils import log, GenerateToolsfrom play import Playerrouter = APIRouter(prefix="/ui/task", tags=['自动化任务'])@router.get("/taskDetail", description="任务信息")async def taskDetail(taskUid: str):    """    获取任务信息    :param taskUid:    :return:    """    task = await UITaskMapper.get_by_uid(taskUid)    return Response.success(task)@router.post("/pageTask", description="任务分页")async def pageTask(pageInfo: PageTaskSchema):    """    任务分页    :param pageInfo:    :return:    """    data = await UITaskMapper.page_query(**pageInfo.dict(exclude_none=True, exclude_unset=True))    return Response.success(data)@router.post("/newTask", description="新建任务")async def newTask(taskInfo: NewTaskSchema):    """    新建任务 返回uid    :param taskInfo:    :return:    """    task = await UITaskMapper.save(**taskInfo.dict())    if task.isAuto:        Scheduler.addTaskJob(task)    return Response.success(task.uid)@router.post("/updateTask", description="修改任务")async def updateTask(taskInfo: UpdateTaskSchema):    """    新建任务 返回uid    :param taskInfo:    :return:    """    await UITaskMapper.update_by_uid(**taskInfo.dict())    return Response.success()@router.post("/removeTask", description="移除任务")async def removeTask(task: RemoveTaskSchema):    """    移除任务    删除关联表 中间表 、 结果表 、 定时任务    :param task:    :return:    """    await UITaskMapper.delete_by_uid(task.taskId)    return Response.success()@router.post("/addUICase", description="添加所属用例")async def addUICase(info: AddTaskCaseSchema):    """    任务添加用例    :param info:    :return:    """    await UITaskMapper.addUICases(**info.dict())    return Response.success()@router.get("/pageUICase", description="所属用例分页")async def pageUICase(pageInfo: PageTaskCaseSchema = Depends()):    """    用例分页    :param pageInfo:    :return:    """    data = await UITaskMapper.page_ui_cases(**pageInfo.dict(exclude_none=True, exclude_unset=True))    return Response.success(data)@router.post("/removeUICase", description="任务移除用例")async def removeUICase(info: RemoveTaskCaseSchema):    """    移除所属用例    :param info:    :return:    """    await UITaskMapper.removeUICase(**info.dict())    return Response.success()@router.get("/getTaskStatusByPart", description="查询稳定性")async def getTaskStatusByPart(partId: int, st: str = GenerateTools.getMonthFirst(), et: str = GenerateTools.getTime(2)):    data = await UITaskMapper.get_status_by_partId(partId, st, et)    return Response.success(data)@router.get("/getTaskById")async def getTaskById(taskId: int):    task = await UITaskMapper.get_by_id(taskId)    return Response.success(task)@router.get("/queryCaseByTaskId")async def queryCaseByTaskId(taskId: int):    cases = await UITaskMapper.query_cases_by_task_id(taskId)    return Response.success(cases)@router.get("/runTask")async def runTask(taskId: int, userId: int):    asyncio.create_task(Player().run_task(taskId, userId))    return Response.success()@router.post("/runTaskByJenkins")async def runTaskByJenkins(data: RunUITaskByJK):    log.info(data)    asyncio.create_task(run_Tasks(**data.dict()))    return Response.success()@router.get("/job/nextRunTime")async def job_info(jobId: str):    t = Scheduler.job_next_run_time(jobId)    return Response.success(t)@router.post("/job/setSwitch")async def set_switch(switchInfo: SetTaskSwitch):    await UITaskMapper.update_by_uid(uid=switchInfo.uid, switch=switchInfo.switch)    Scheduler.set_switch(jobId=switchInfo.uid, switch=switchInfo.switch)    return Response.success()@router.get("/jobText/start")async def start(name):    from play.debugger import Tester    tests = asyncio.create_task(Tester().run_task(1, 2), name=name)    return Response.success()@router.get("/jobText/stop")async def stop(name):    tasks = asyncio.all_tasks()    for t in tasks:        if t.get_name() == name:            t.cancel()            # 等待任务取消完成            try:                await t            except asyncio.CancelledError:                print("Task was cancelled and has finished")    return Response.success()