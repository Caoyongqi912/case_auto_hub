#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : ui_task# @Software: PyCharm# @Desc:import asynciofrom fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.ui.uiCaseResultMapper import UICaseResultMapper, UICaseTaskResultBaseMapperfrom app.model.base import Userfrom app.response import Responsefrom app.mapper.ui.uiTaskMapper import UITaskMapperfrom app.scheduler import Schedulerfrom app.schema.ui import *from play.player import run_Tasks, Playerfrom utils import log, GenerateToolsrouter = APIRouter(prefix="/ui/task", tags=['自动化任务'])@router.get("/detail", description="任务信息")async def taskDetail(taskId: int, _: User = Depends(Authentication())):    """    获取任务信息    :param taskId:    :param _:user    :return:    """    task = await UITaskMapper.get_by_id(taskId)    return Response.success(task)@router.post("/page", description="任务分页")async def pageTask(pageInfo: PageTaskSchema, _: User = Depends(Authentication())):    """    任务分页    :param _: user    :param pageInfo:    :return:    """    data = await UITaskMapper.page_query(**pageInfo.dict(exclude_none=True, exclude_unset=True))    return Response.success(data)@router.post("/insert", description="新建任务")async def newTask(taskInfo: NewTaskSchema, user: User = Depends(Authentication())):    """    新建任务 返回uid    :param taskInfo:    :param user    :return:    """    task = await UITaskMapper.save(        creatorUser=user,        **taskInfo.dict())    # if task.isAuto:    #     Scheduler.addTaskJob(task)    return Response.success(task)@router.post("/update", description="修改任务")async def updateTask(taskInfo: UpdateTaskSchema, ur: User = Depends(Authentication())):    """    新建任务 返回uid    :param taskInfo:    :param ur    :return:    """    task = await UITaskMapper.update_by_id(        updateUser=ur,        **taskInfo.dict())    return Response.success(task)@router.post("/remove", description="移除任务")async def removeTask(task: RemoveTaskSchema):    """    移除任务    删除关联表 中间表 、 结果表 、 定时任务    :param task:    :return:    """    await UITaskMapper.delete_by_uid(task.taskId)    return Response.success()@router.post("/association/case", description="添加所属用例")async def addUICase(info: AddTaskCaseSchema, _: User = Depends(Authentication())):    """    任务添加用例    :param info:    :param _:user    :return:    """    await UITaskMapper.association_cases(**info.dict())    return Response.success()@router.post("/association/remove", description="任务移除用例")async def removeUICase(info: RemoveTaskCaseSchema, _: User = Depends(Authentication())):    """    移除所属用例    :param info:    :return:    """    await UITaskMapper.remove_association_case(**info.dict())    return Response.success()@router.post("/association/reorder", description="排序所属用例")async def reorderUICase(info: ReorderTaskCaseSchema, _: User = Depends(Authentication())):    """    重新排序用例    :param info:    :param _:    :return:    """    await UITaskMapper.reorder_association_case(**info.dict())    return Response.success()@router.get("/query/case", description="所属用例分页")async def query_cases(taskId: int, _: User = Depends(Authentication())):    """    用例分页    :param taskId:    :param _:    :return:    """    data = await UITaskMapper.query_case(taskId)    return Response.success(data)@router.get("/getTaskStatusByPart", description="查询稳定性")async def getTaskStatusByPart(partId: int, st: str = GenerateTools.getMonthFirst(), et: str = GenerateTools.getTime(2)):    data = await UITaskMapper.get_status_by_partId(partId, st, et)    return Response.success(data)@router.post("/execute/handle", description="手动执行任务")async def runTask(t: ExecuteTaskCasesSchema, sr: User = Depends(Authentication())):    log.debug(t)    log.debug(sr)    await Player(sr).run_task(t.taskId)    # try:    #     asyncio.create_task(Player(sr).run_task(t.taskId))    # except Exception as e:    #     raise e    return Response.success()@router.post("/report/base/page", description="任务报告分页")async def pageTaskReport(pageInfo: PageTaskReportSchema, _: User = Depends(Authentication())):    """    任务报告分页    :param pageInfo:    :param _:    :return:    """    data = await UICaseTaskResultBaseMapper.page_query(**pageInfo.dict())    return Response.success(data)@router.get("/report/base/detail", description="任务报告信息")async def getTaskReport(detailId: int, _: User = Depends(Authentication())):    """    任务报告分页    :param detailId:    :param _:    :return:    """    data = await UICaseTaskResultBaseMapper.get_by_id(ident=detailId)    return Response.success(data)@router.post("/report/case/query", description="任务报告详情用例结果分页")async def queryTaskCaseReport(info: QueryCaseResultByBaseIdSchema, _: User = Depends(Authentication())):    """    任务报告分页    :param info:    :param _:    :return:    """    data = await UICaseResultMapper.query_by(ui_case_base_id=info.baseId)    return Response.success(data)@router.post("/execute/jenkins", description="jenkins执行任务")async def runTaskByJenkins(data: RunUITaskByJK):    log.info(data)    asyncio.create_task(run_Tasks(**data.dict()))    return Response.success()@router.get("/job/nextRunTime")async def job_info(jobId: str):    t = Scheduler.job_next_run_time(jobId)    return Response.success(t)@router.post("/job/setSwitch")async def set_switch(switchInfo: SetTaskSwitch):    await UITaskMapper.update_by_uid(uid=switchInfo.uid, switch=switchInfo.switch)    Scheduler.set_switch(jobId=switchInfo.uid, switch=switchInfo.switch)    return Response.success()# @router.get("/jobText/start")# async def start(name):#     from play.debugger import Tester#     tests = asyncio.create_task(Tester().run_task(1, 2), name=name)#     return Response.success()@router.get("/jobText/stop")async def stop(name):    tasks = asyncio.all_tasks()    for t in tasks:        if t.get_name() == name:            t.cancel()            # 等待任务取消完成            try:                await t            except asyncio.CancelledError:                print("Task was cancelled and has finished")    return Response.success()