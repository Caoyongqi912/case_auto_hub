#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/1/22# @Author : cyq# @File : ui_step# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.ui.uiCaseMapper import UICaseMapper, UICaseStepMapperfrom app.model.base import Userfrom app.response import Responsefrom app.schema.ui import AddUICaseStep, PutUICaseStep, RemoveUIStepSchema, ReOrderUIStepSchema, CopyUIStepSchemarouter = APIRouter(prefix="/ui/case/step", tags=['自动化用例步骤'])@router.post("/add", description="添加步骤")async def add_common_step(stepInfo: AddUICaseStep, cr: User = Depends(Authentication())):    # 新增用例并关联case    if stepInfo.case_id and stepInfo.is_common_step is False:        await UICaseMapper.add_step(**stepInfo.dict())    else:        # 新增common step        await UICaseStepMapper.save(            creatorUser=cr,            **stepInfo.dict(                exclude_none=True,                exclude_unset=True            ))    return Response.success()@router.get("/detail", description="用例步骤详情")async def step_detail(stepId: int, _: User = Depends(Authentication())):    """    query_steps    :return:    """    data = await UICaseStepMapper.get_by_id(ident=stepId)    return Response.success(data)@router.post("/update", description="修改步骤")async def put_step(stepInfo: PutUICaseStep, ur: User = Depends(Authentication())):    await UICaseStepMapper.update_by_id(        updateUser=ur,        **stepInfo.dict(            exclude_none=True,            exclude_unset=True        ))    return Response.success()@router.post("/remove", description="删除步骤")async def del_step(stepInfo: RemoveUIStepSchema, _: User = Depends(Authentication())):    await UICaseStepMapper.remove_step(**stepInfo.dict())    return Response.success()@router.post("/order", description="排序步骤")async def order_step(stepInfo: ReOrderUIStepSchema, _: User = Depends(Authentication())):    await UICaseStepMapper.reorder_step(**stepInfo.dict())    return Response.success()@router.post("/copy", description="复制步骤")async def copy_step(stepInfo: CopyUIStepSchema, _: User = Depends(Authentication())):    await UICaseStepMapper.copt_step(**stepInfo.dict())    return Response.success()