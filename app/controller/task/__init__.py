#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/7# @Author : cyq# @File : __init__.py# @Software: PyCharm# @Desc:import asynciofrom fastapi import APIRouter, Depends, WebSocket, WebSocketDisconnectfrom app.controller import Authenticationfrom app.model.base import Userfrom app.response import Responsefrom app.ws import iofrom utils import logfrom pydantic import BaseModelrouter = APIRouter(prefix="/task", tags=["任务"])class Task(BaseModel):    task_id: str@router.post("/job1", description="任务1")async def test1(data: Task, user=Depends(Authentication())):    log.debug(data)    asyncio.create_task(send_messages(uid=user.uid))    return Response.success()# 后台任务async def send_messages(uid):    try:        for i in range(1, 11):            log.debug(i)            await io.log_emit(f"Message {i}", uid=uid)            await asyncio.sleep(1)  # 模拟任务的延迟        await io.log_emit(f"Complete", uid=uid)        await io.disconnect(uid=uid)    except Exception as e:        log.error(e)        raise e# async def task_test1(user: User, task_id: str):#     log.info("开始执行任务1")#     for i in range(1, 10):#         await asyncio.sleep(1)#         await manager.send_personal_message(message=f"hahah = {i}", client_id=user.uid)#     log.debug("任务1执行完毕")#     await manager.send_personal_message(message=f"over", client_id=user.uid)### @router.websocket("/ws/task/{task_id}")# async def websocket_task(ws: WebSocket):#     await ws.accept()#     await task_test2(socket=ws)async def task_test2(socket: WebSocket):    log.info("开始执行任务2")    for i in range(1, 10):        await asyncio.sleep(1)        await socket.send_text(f"hahah = {i}")    log.debug("任务2执行完毕")    await socket.send_text("over")