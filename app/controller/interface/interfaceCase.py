#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceCase# @Software: PyCharm# @Desc:import asynciofrom fastapi import APIRouterfrom fastapi.params import Dependsfrom app.mapper.interface import InterfaceConditionMapperfrom app.mapper.interface.interfaceVarsMapper import InterfaceVarsMapperfrom interface.starter import APIStarterfrom app.schema.base.vars import *from app.controller import Authenticationfrom app.model.base import Userfrom app.response import Responsefrom app.schema.interface.interfaceCaseSchema import *from interface.runner import InterFaceRunnerfrom utils import logfrom app.mapper.interface.interfaceCaseMapper import InterfaceCaseMapper, InterfaceCaseStepContentMapperrouter = APIRouter(prefix="/interface/case", tags=['自动化业务接口'])@router.post("/insertBaseInfo", description="插入用例基本信息")async def insert_case_base_info(info: InsertInterfaceCaseBaseInfoSchema, creator: User = Depends(    Authentication())):    case = await InterfaceCaseMapper.save(        creatorUser=creator,        **info.model_dump()    )    return Response.success(case)@router.get("/baseInfo", description="获取用例基本信息")async def get_case_base_info(info: OptionInterfaceCaseSchema = Depends(), _: User = Depends(    Authentication())):    case = await InterfaceCaseMapper.get_by_id(ident=info.id)    return Response.success(case)@router.post("/page", description="分页")async def page_case(pageInfo: PageInterfaceCaseSchema, _=Depends(Authentication())):    cases = await InterfaceCaseMapper.page_by_module(**pageInfo.model_dump(        exclude_unset=True,        exclude_none=True,    ))    return Response.success(cases)@router.post("/update", description="修改用例基本信息")async def update_case_base_info(info: OptionInterfaceCaseSchema, updater: User = Depends(    Authentication())):    await InterfaceCaseMapper.update_by_id(        updateUser=updater,        **info.model_dump()    )    return Response.success()@router.post("/remove", description="删除用例")async def remove_api_case(info: OptionInterfaceCaseSchema, _: User = Depends(    Authentication())):    await InterfaceCaseMapper.remove_case(info.id)    return Response.success()@router.post("/copy", description="复制用例")async def copy_case(info: OptionInterfaceCaseSchema, user: User = Depends(    Authentication())):    await InterfaceCaseMapper.copy_case(        case_id=info.id,        user=user    )    return Response.success()@router.post("/copyContentStep", description="复制用例中api")async def copy_case_api(info: CopyContentStepSchema, _: User = Depends(Authentication())):    await InterfaceCaseMapper.copy_content(        **info.model_dump(),    )    return Response.success()@router.post("/removeContentStep", description="从case里移除api")async def remove_api_form_case(removeInfo: RemoveCaseContentSchema, _=Depends(Authentication())):    await InterfaceCaseMapper.remove_content_step(**removeInfo.model_dump())    return Response.success()@router.get("/queryContents", description="查询关联步骤")async def query_content_by_caseId(caseId: int, _=Depends(Authentication())):    contents = await InterfaceCaseMapper.query_content(case_id=caseId)    return Response.success(contents)@router.post("/reorderContents", description="管理content重新排序")async def reorder_content_by_caseId(orderInfo: ReorderContentStepSchema, _=Depends(Authentication())):    await InterfaceCaseMapper.reorder_content_step(**orderInfo.model_dump())    return Response.success()@router.post("/associationApis", description="选择添加公共API")async def select_common_apis(apis: AssociationApisSchema, _=Depends(Authentication())):    await InterfaceCaseMapper.association_apis(**apis.model_dump())    return Response.success()@router.post("/associationApiGroups", description="选择添加公共API GROUP")async def select_groups(info: AddInterfaceCaseCommonGROUPSchema, _: User = Depends(Authentication())):    await InterfaceCaseMapper.association_api_groups(**info.model_dump(), )    return Response.success()@router.post("/associationCondition", description="初始化条件")async def init_condition(info: AssociationConditionSchema, user: User = Depends(Authentication())):    await InterfaceCaseMapper.association_api_condition(**info.model_dump(), user=user)    return Response.success()@router.get("/conditionContent/queryConditionAPI", description="查询子步骤")async def query_content_condition_steps(content_condition_id: int, _: User = Depends(Authentication())):    data = await InterfaceConditionMapper.query_condition_apis_by_content_id(content_condition_id)    log.debug(data)    return Response.success(data)@router.post("/conditionContent/associationAPI", description="关联API")async def association_api(associationAPIs: AssociationConditionAPISchema, _: User = Depends(Authentication())):    data = await InterfaceConditionMapper.association_apis(**associationAPIs.model_dump())    log.debug(data)    return Response.success(data)@router.post("/conditionContent/removeAssociationAPI", description="解除关联API")async def remove_association_condition_api(associationAPIs: RemoveAssociationConditionAPISchema,                                           _: User = Depends(Authentication())):    await InterfaceConditionMapper.remove_association_api(**associationAPIs.model_dump())    return Response.success()@router.post("/conditionContent/reorderAssociationAPI", description="关联API")async def reorder_association_api(associationAPIs: AssociationConditionAPISchema, _: User = Depends(Authentication())):    await InterfaceConditionMapper.reorder_condition_apis(**associationAPIs.model_dump())    return Response.success()@router.post("/updateConditionContent", description="更新")async def update_condition_content(condition: UpdateConditionSchema, user: User = Depends(Authentication())):    data = await InterfaceConditionMapper.update_by_id(**condition.model_dump(), updateUser=user)    return Response.success(data)@router.get("/getConditionContent", description="查询")async def get_condition_content(condition_id: int, _: User = Depends(Authentication())):    data = await InterfaceConditionMapper.get_by_id(condition_id)    return Response.success(data)@router.post("/updateCaseContent", description="开启关闭")async def switch_case_content(content: UpdateCaseContentStepSchema, user: User = Depends(Authentication())):    data = await InterfaceCaseStepContentMapper.update_by_id(**content.model_dump(exclude_none=True), updateUser=user)    return Response.success(data)@router.post("/addCaseContent", description="添加步骤")async def add_case_content(content: AddCaseContentStepSchema, user: User = Depends(Authentication())):    data = await InterfaceCaseStepContentMapper.add_content(**content.model_dump(        exclude_none=True    ))    return Response.success(data)@router.post("/execute/io", description="用例执行")async def execute_case_api(case: ExecuteInterfaceCaseSchema, starter: User = Depends(Authentication())):    _starter = APIStarter(starter)    asyncio.create_task(InterFaceRunner(starter=_starter,                                        ).run_interCase(interfaceCaseId=case.caseId))    return Response.success()@router.post("/execute/back", description="用例执行")async def execute_case_api(case: ExecuteInterfaceCaseSchema, starter: User = Depends(Authentication())):    _starter = APIStarter(starter)    asyncio.create_task(InterFaceRunner(starter=_starter,                                        ).run_interCase(interfaceCaseId=case.caseId))    return Response.success()@router.post('/vars/add', description='添加变量')async def add_vars(varInfo: AddVarsSchema, cr: User = Depends(Authentication())):    await InterfaceVarsMapper.insert(user=cr,                                     **varInfo.model_dump(exclude_none=True, exclude_unset=True))    return Response.success()@router.post('/vars/update', description='修改变量')async def update_vars(varInfo: UpdateVarsSchema, cr: User = Depends(Authentication())):    await InterfaceVarsMapper.update_by_uid(updateUser=cr, **varInfo.model_dump(exclude_none=True,                                                                                exclude_unset=True))    return Response.success()@router.post('/vars/remove', description='删除变量')async def remove_vars(varInfo: DeleteVarsSchema, _: User = Depends(Authentication())):    await InterfaceVarsMapper.delete_by_uid(**varInfo.model_dump())    return Response.success()@router.post('/vars/query', description='查询变量')async def query_vars(varsInfo: QueryVarsSchema, _: User = Depends(Authentication())):    log.debug(varsInfo)    datas = await InterfaceVarsMapper.query_by(**varsInfo.model_dump())    return Response.success(datas)