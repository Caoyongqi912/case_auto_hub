#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceApi# @Software: PyCharm# @Desc:import asynciofrom fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.interface import InterfaceScriptMapper, InterfaceMapperfrom app.response import Responsefrom app.schema.interface import *from interface.io_sender import APISocketSenderfrom interface.starter import Starterfrom utils import MyLoguru, logfrom interface.runner import InterFaceRunnerfrom utils.redis_ import RedisManagerLOG = MyLoguru().get_logger()router = APIRouter(prefix="/interface", tags=['自动化接口步骤'])@router.post("/start/recording")async def start_recording(recordInfo: RecordingSchema, auth=Depends(Authentication())):    await RedisManager.set_record(name=auth.uid,                                  value=recordInfo.dict(exclude_unset=True,                                                        exclude_none=True))    return Response.success()@router.post("/insert", description="添加步骤")async def insert_interface_Api(ApiInfo: AddInterfaceApiSchema, auth=Depends(Authentication())):    api = await InterfaceMapper.save(        creatorUser=auth,        **ApiInfo.dict())    return Response.success(api)@router.get("/detail", description="接口信息")async def detail_interface(interfaceId: int, _=Depends(Authentication())):    inter = await InterfaceMapper.get_by_id(interfaceId)    return Response.success(inter)@router.post("/copy", description="复制")async def detail_interface(interfaceId: CopyInterfaceApiSchema, copyer=Depends(Authentication())):    inter = await InterfaceMapper.copy_api(        apiId=interfaceId.id,        creator=copyer    )    log.debug(inter)    return Response.success(inter)@router.get("/queryBy", description="批量查询")async def query_by_interface(inter: InterfaceApiFieldSchema, auth=Depends(Authentication())):    inters = await InterfaceMapper.get_by(**inter.dict(        exclude_unset=True,        exclude_none=True,    ))    return Response.success(inters)@router.post("/page", description="分页查询")async def page_interface(inter: PageInterfaceApiSchema, _=Depends(Authentication())):    inters = await InterfaceMapper.page_query(        **inter.dict(            exclude_unset=True,            exclude_none=True,        )    )    return Response.success(inters)@router.post("/update", description="修改接口")async def update_interface(inter: InterfaceApiFieldSchema, auth=Depends(Authentication())):    await InterfaceMapper.update_by_id(**inter.dict(        exclude_unset=True,        exclude_none=True,    ), updateUser=auth)    return Response.success()@router.post("/remove", description="删除")async def remove_interface(inter: RemoveInterfaceApiSchema, _=Depends(Authentication())):    await InterfaceMapper.delete_by_id(ident=inter.id)    return Response.success()@router.post("/try", description="调试")async def try_interface_Api(interId: TryAddInterfaceApiSchema, user=Depends(Authentication())):    """api 执行 """    logger = APISocketSender(user.uid)    _starter = Starter(user)    resp = await InterFaceRunner(        starter=_starter,        io=logger    ).try_interface(interface=interId.interfaceId)    return Response.success([resp])@router.get("/query/script_doc", description="Api可用脚本")async def get_interface_script_doc():    docs = await InterfaceScriptMapper.query_all()    return Response.success(docs)