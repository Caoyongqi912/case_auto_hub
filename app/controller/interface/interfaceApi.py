#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceApi# @Software: PyCharm# @Desc:from fastapi import APIRouter, Depends, Form, UploadFile, Filefrom app.controller import Authenticationfrom app.mapper.interface import InterfaceScriptMapper, InterfaceMapperfrom app.model.base import Userfrom app.response import Responsefrom app.schema.interface import *from app.schema.interface.interfaceApiSchema import PageInterfaceApiNpPartSchema, SetInterfacesPartSchema, CurlSchemafrom enums import StarterEnumfrom interface.fileReader import FileReaderfrom interface.io_sender import APISocketSenderfrom interface.starter import Starterfrom utils import MyLoguru, logfrom interface.runner import InterFaceRunnerfrom utils.curlTrans import CurlConverterLOG = MyLoguru().get_logger()router = APIRouter(prefix="/interface", tags=['自动化接口步骤'])@router.post("/setInterfacePart", description="设置接口部分")async def set_interface_part(info: SetInterfacesPartSchema, auth=Depends(Authentication())):    await InterfaceMapper.set_interfaces_parts(**info.dict())    return Response.success()@router.post("/upload", description="上传")async def upload_api(valueType: str = Form(...),  # 用 Form 来接受表单参数                     project_id: str = Form(...),                     part_id: str = Form(...),                     env_id: str = Form(...),                     api_file: UploadFile = File(...),  # 上传文件,                     cr: User = Depends(Authentication())):    """    创建 目录    创建 interface    :param valueType:    :param project_id:    :param part_id:    :param env_id:    :param api_file:    :param cr:    :return:    """    content = await FileReader.readUploadFile(valueType, api_file)    log.debug(content)    await InterfaceMapper.upload(project_id=project_id,                                 part_id=part_id,                                 env_id=env_id,                                 creator=cr,                                 apis=content)    return Response.success(content)@router.post("/insert", description="添加步骤")async def insert_interface_Api(ApiInfo: AddInterfaceApiSchema, auth=Depends(Authentication())):    api = await InterfaceMapper.save(        creatorUser=auth,        **ApiInfo.dict())    return Response.success(api)@router.get("/detail", description="接口信息")async def detail_interface(interfaceId: int, _=Depends(Authentication())):    inter = await InterfaceMapper.get_by_id(interfaceId)    return Response.success(inter)@router.post("/copy", description="复制")async def detail_interface(interfaceId: CopyInterfaceApiSchema, copyer=Depends(Authentication())):    inter = await InterfaceMapper.copy_api(        apiId=interfaceId.id,        creator=copyer    )    return Response.success(inter)@router.get("/queryBy", description="批量查询")async def query_by_interface(inter: InterfaceApiFieldSchema, auth=Depends(Authentication())):    inters = await InterfaceMapper.get_by(**inter.dict(        exclude_unset=True,        exclude_none=True,    ))    return Response.success(inters)@router.post("/page", description="分页查询")async def page_interface(inter: PageInterfaceApiSchema, _=Depends(Authentication())):    log.debug(inter)    inters = await InterfaceMapper.page_by_part(        **inter.dict(            exclude_unset=True,            exclude_none=True        )    )    return Response.success(inters)@router.post("/pageNoPart", description="分页查询")async def page_interface_no_part(inter: PageInterfaceApiNpPartSchema, _=Depends(Authentication())):    inters = await InterfaceMapper.page_query(        part_id=None,        **inter.dict(            exclude_unset=True,            exclude_none=True        )    )    return Response.success(inters)@router.post("/update", description="修改接口")async def update_interface(inter: InterfaceApiFieldSchema, auth=Depends(Authentication())):    log.debug(inter)    await InterfaceMapper.update_by_id(**inter.dict(        exclude_unset=True,        exclude_none=True,    ), updateUser=auth)    return Response.success()@router.post("/remove", description="删除")async def remove_interface(inter: RemoveInterfaceApiSchema, _=Depends(Authentication())):    await InterfaceMapper.remove(inter.id)    return Response.success()@router.post("/try", description="调试")async def try_interface_Api(interId: TryAddInterfaceApiSchema, user=Depends(Authentication())):    """api 执行 """    logger = APISocketSender(user.uid)    _starter = Starter(user)    resp = await InterFaceRunner(        starter=_starter,        io=logger    ).try_interface(interface=interId.interfaceId)    return Response.success([resp])@router.get("/query/script_doc", description="Api可用脚本")async def get_interface_script_doc(_: User = Depends(Authentication())):    docs = await InterfaceScriptMapper.query_all()    return Response.success(docs)@router.post("/transCurl", description="转换curl")async def tansCurlScript(script: CurlSchema, _: User = Depends(Authentication())):    """转换curl"""    try:        info = CurlConverter(script.script).parse_curl()        return Response.success(info)    except Exception as e:        return Response.error("解析失败、请检查")