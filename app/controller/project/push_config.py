#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/3/10# @Author : cyq# @File : push_config# @Software: PyCharm# @Desc:from fastapi import APIRouterfrom fastapi.params import Dependsfrom app.mapper.project.pushMapper import PushMapperfrom app.response import Responsefrom app.controller import Authenticationfrom app.model.base import Userfrom app.schema.base import InsertPushSchema, OptPushSchema, PagePushSchemarouter = APIRouter(prefix="/project/push", tags=["项目配置"])@router.post("/insertConfig", description="推送配置")async def add_push(pushValues: InsertPushSchema, cr: User = Depends(Authentication())):    data = await PushMapper.save(        creatorUser=cr,        **pushValues.model_dump()    )    return Response.success(data)@router.post("/updateConfig", description="修改推送配置")async def edit_push(pushValues: OptPushSchema, ur: User = Depends(Authentication())):    data = await PushMapper.update_by_id(        updateUser=ur,        **pushValues.model_dump(exclude_none=True)    )    return Response.success(data)@router.post("/removeConfig", description="修改推送配置")async def remove_push(pushValues: OptPushSchema, _: User = Depends(Authentication())):    await PushMapper.delete_by_id(ident=pushValues.id)    return Response.success()@router.post("/pageConfig", description="推送配置分页")async def page_push(pushValues: PagePushSchema, _: User = Depends(Authentication())):    data = await PushMapper.page_query(**pushValues.model_dump(exclude_none=True))    return Response.success(data)@router.get("/queryConfig", description="推送配置")async def remove_push(_: User = Depends(Authentication())):    data = await PushMapper.query_all()    return Response.success(data)