#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/16# @Author : cyq# @File : validate# @Software: PyCharm# @Desc:from fastapi.responses import JSONResponsefrom fastapi.encoders import jsonable_encoderfrom fastapi import status, Requestfrom fastapi.exceptions import RequestValidationErrorfrom utils import logfrom enums import HttpCodeEnumasync def validation_exception_handler(request: Request, exc: RequestValidationError):    """    处理请求验证异常的异步函数。    当请求中的数据不符合预期格式时，FastAPI的请求验证器可能会抛出RequestValidationError异常。    本函数旨在捕获这类异常，并返回一个标准化的错误响应，以告知客户端请求数据存在问题。    :param request: 发生验证错误的请求对象    :param exc: 抛出的验证错误异常实例    :return: JSONResponse    """    log.debug("==========validation_exception_handler=========")    return JSONResponse(        status_code=status.HTTP_200_OK,        content=jsonable_encoder({            "code": HttpCodeEnum.PARAMS_VALIDA_ERROR,            "data": None,            "msg": validationMsg(exc),        })    )def validationMsg(exc: RequestValidationError) -> str:    excInfo = exc.errors()[0]    log.info(excInfo)    _type = excInfo.get("type")    _param = excInfo.get("loc")[-1]    _msg = excInfo.get("msg")    if "missing" in _type:        return "miss field:" + _param    elif "type_error" in _type:        return f"{_msg} : {_param}"    elif "value_error" in _type:        return f"{_msg} : {_param}"    return "参数解析失败"