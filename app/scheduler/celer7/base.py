#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/4/7# @Author : cyq# @File : base# @Software: PyCharm# @Desc:from celery import Celeryfrom celery.schedules import crontabfrom .config import celery_configfrom app.mapper.ui.uiTaskMapper import UITaskMapperfrom app.mapper.interface.interfaceTaskMapper import InterfaceTaskMappercelery_app = Celery()celery_app.config_from_object(    celery_config)async def update_all_celery_schedules():    # 合并 API 和 UI 任务的配置    beat_schedule = {}    # 添加 API 任务    api_tasks = await InterfaceTaskMapper.query_auto_task()    for task in api_tasks:        beat_schedule[f'api-task-{task.uid}'] = {  # 添加前缀区分类型            'task': 'app.worker.tasks.execute_api_task',            'schedule': _parse_crontab(task.cron),            'args': (task.id,),            'options': {'queue': "api_tasks"}        }    # 添加 UI 任务    ui_tasks = await UITaskMapper.query_auto_task()    for task in ui_tasks:        beat_schedule[f'ui-task-{task.uid}'] = {  # 添加前缀区分类型            'task': 'app.worker.tasks.execute_ui_task',            'schedule': _parse_crontab(task.cron),            'args': (task.id,),            'options': {'queue': "ui_tasks"}        }    # 一次性更新（避免覆盖）    celery_app.conf.beat_schedule = beat_scheduledef _parse_crontab(cron_expression: str) -> crontab:    """    0 12 * * *    """    try:        fields = cron_expression.strip().split()        if len(fields) != 5:            raise ValueError("Crontab 表达式必须包含5个字段（分 时 日 月 周）")        return crontab(            minute=fields[0],            hour=fields[1],            day_of_week=fields[2],            day_of_month=fields[3],            month_of_year=fields[4],        )    except Exception as e:        raise ValueError(f"无效的 crontab 表达式: {cron_expression}. 错误: {str(e)}")