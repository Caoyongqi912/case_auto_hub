#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/4/3# @Author : cyq# @File : taskClient# @Software: PyCharm# @Desc:from typing import TypeVar, Union, Optionalfrom apscheduler.job import Jobfrom app.model.ui import UITaskModelfrom app.model.interface import InterfaceTaskfrom app.scheduler import Triggerfrom app.scheduler.base import BaseSchedulerfrom app.scheduler.tasks import ui_task, api_taskfrom utils import MyLogurulog = MyLoguru().get_logger()TaskType = TypeVar('TaskType', bound=Union['UITaskModel', 'InterfaceTask'])class TaskScheduler(BaseScheduler):    """    ui api 调度实现    """    async def add_ui_job(self, task: UITaskModel) -> Optional[Job]:        return await self.add_job(            func=ui_task,            name=task.title,            job_id=f"UI_{task.uid}",            trigger=Trigger(task.cron),            replace_existing=True,            args=(task.id,)        )    async def add_api_job(self, task: InterfaceTask) -> Optional[Job]:        return await self.add_job(            func=api_task,            name=task.title,            job_id=f"API_{task.uid}",            trigger=Trigger(task.cron),            replace_existing=True,            args=(task.id,)        )    async def modify_task(self, task: TaskType) -> Optional[Job]:        """修改已有任务配置"""        task_type = "UI" if isinstance(task, UITaskModel) else "API"        job_id = f"{task_type}_{task.uid}"        job = await self.get_job(job_id)        if not job:            log.warning(f"Job {job_id} not found, creating new one")            return await (self.add_ui_job(task) if task_type == "UI"                          else self.add_ui_job(task))        self.scheduler.modify_job(            job_id=f"{task_type}_{task.uid}",            name=task.title,            trigger=Trigger(task.cron)        )        return job