#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/10# @Author : cyq# @File : fileMapper# @Software: PyCharm# @Desc:from sqlalchemy.ext.asyncio import AsyncSessionfrom app.mapper import Mapperfrom app.model.base import FileModelfrom app.model import async_sessionfrom utils import logclass FileMapper(Mapper):    __model__ = FileModel    @classmethod    async def remove_file(cls, uid: str, session: AsyncSession = None):        """        删除本地文件        """        try:            # 说明是 clear_case_result  传递过来的 不判断是否存在            if session:                file = await cls.get_by_uid(uid.strip(), session=session, raise_error=False)            else:                async with async_session() as session:                    async with session.begin():                        log.debug(f"删除文件 {uid}")                        file = await cls.get_by_uid(uid.strip(), session=session)            if file:                path = file.filePath                await session.delete(file)                from utils.fileManager import FileManager                FileManager.delFile(path)                log.debug(f"删除 {path}")        except Exception as e:            raise e    @classmethod    async def insert_file(cls, filePath: str, fileName: str) -> FileModel:        try:            async with async_session() as session:                async with session.begin():                    file = FileModel(                        fileType="image/jpeg",                        filePath=filePath,                        fileName=fileName                    )                    await cls.add_flush_expunge(session, file)                    return file        except Exception as e:            log.error(e)            raise e