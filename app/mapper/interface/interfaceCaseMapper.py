#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/10/21# @Author : cyq# @File : interfaceCaseMapper# @Software: PyCharm# @Desc:from typing import List, Union, Sequencefrom sqlalchemy import select, insert, updatefrom sqlalchemy.ext.asyncio import AsyncSessionfrom app.mapper import Mapperfrom app.model import async_sessionfrom app.model.base import Userfrom app.model.interface import InterFaceCaseModel, InterfaceModelfrom app.model.interface.InterfaceCaseStepContent import InterfaceCaseStepContent, InterfaceGroupModel, \    InterfaceConditionfrom app.model.interface.association import InterfaceCaseStepContentAssociationfrom enums.CaseEnum import CaseStepContentTypefrom utils import logasync def get_case_step_content_last_index(caseId: int, session: AsyncSession) -> int:    """    返回关联表排序索引    """    stmt = select(InterfaceCaseStepContentAssociation.step_order).where(        InterfaceCaseStepContentAssociation.interface_case_id == caseId    ).order_by(        InterfaceCaseStepContentAssociation.step_order.desc()    ).limit(1)    result = await session.execute(stmt)    return result.scalar() or 0class InterfaceCaseMapper(Mapper):    __model__ = InterFaceCaseModel    @classmethod    async def association_apis(cls, interface_case_id: int, interface_id_list: List[int]):        """        创建APIS关联        私有API 公共API        """        async with async_session() as session:            async with session.begin():                case: InterFaceCaseModel = await cls.get_by_id(session=session, ident=interface_case_id)                case.apiNum += len(interface_id_list)                case_step_content_step_apis = []                for interface_id in interface_id_list:                    case_step_content_step_apis.append(                        await InterfaceCaseStepContentMapper.init_content(                            session=session,                            content_type=CaseStepContentType.STEP_API,                            target_id=interface_id                        )                    )                case_step_index = await get_case_step_content_last_index(interface_case_id, session)                await session.execute(                    insert(InterfaceCaseStepContentAssociation).values(                        [{                            "interface_case_id": interface_case_id,                            "interface_case_content_id": content.id,                            "step_order": index                        } for index, content in enumerate(case_step_content_step_apis, start=case_step_index + 1)]                    )                )    @classmethod    async def association_api_groups(cls, interface_case_id: int, api_group_id_list: List[int]):        """        关联组        """        async with async_session() as session:            async with session.begin():                case: InterFaceCaseModel = await cls.get_by_id(session=session, ident=interface_case_id)                case.apiNum += len(api_group_id_list)                case_step_content_group_apis = []                for group_id in api_group_id_list:                    case_step_content_group_apis.append(                        await InterfaceCaseStepContentMapper.init_content(                            session=session,                            content_type=CaseStepContentType.STEP_API_GROUP,                            target_id=group_id                        )                    )                case_step_index = await get_case_step_content_last_index(interface_case_id, session)                log.debug(case_step_content_group_apis)                await session.execute(                    insert(InterfaceCaseStepContentAssociation).values(                        [{                            "interface_case_id": interface_case_id,                            "interface_case_content_id": content.id,                            "step_order": index                        } for index, content in enumerate(case_step_content_group_apis, start=case_step_index + 1)]                    )                )    @classmethod    async def association_api_condition(cls, interface_case_id: int, user: User):        """        关联条件        """        from app.mapper.interface import InterfaceConditionMapper        async with async_session() as session:            async with session.begin():                case: InterFaceCaseModel = await cls.get_by_id(session=session, ident=interface_case_id)                case.apiNum += 1                condition = await InterfaceConditionMapper.add_empty_condition(session=session, user=user)                condition_content = await InterfaceCaseStepContentMapper.init_content(                    session=session,                    content_type=CaseStepContentType.STEP_API_CONDITION,                    target_id=condition.id                )                case_step_index = await get_case_step_content_last_index(interface_case_id, session)                await session.execute(                    insert(InterfaceCaseStepContentAssociation).values(                        {                            "interface_case_id": interface_case_id,                            "interface_case_content_id": condition_content.id,                            "step_order": case_step_index + 1                        }                    )                )    @classmethod    async def reorder_content_step(cls, case_id: int, content_step_order: List[int]):        """        步骤排序        """        async with async_session() as session:            # 构建批量更新数据            update_values = []            for index, step_id in enumerate(content_step_order, start=1):                update_values.append({                    "interface_case_content_id": step_id,                    "interface_case_id": case_id,                    "step_order": index                })            # 批量更新            await session.execute(                update(InterfaceCaseStepContentAssociation),                update_values            )            await session.commit()    @classmethod    async def remove_content_step(cls, case_id: int, content_step_id: int):        """        移除step        删除 CONTENT_STEP 解除关联        API 私有STEP 直接删除。        API CONDITION 删除        """        from .interfaceMapper import InterfaceConditionMapper        async with async_session() as session:            async with session.begin():                case: InterFaceCaseModel = await cls.get_by_id(session=session, ident=case_id)                case.apiNum -= 1                content: InterfaceCaseStepContent = await InterfaceCaseStepContentMapper.get_by_id(                    ident=content_step_id, session=session)                # API 步骤                # if content.content_type == CaseStepContentType.STEP_API:                # 不再判断common                # interface: InterfaceModel = await InterfaceMapper.get_by_id(ident=content.target_id,                #                                                             session=session)                #                # # 非公共直接删除                # if not interface.is_common:                #     await session.delete(interface)                # pass                if content.content_type == CaseStepContentType.STEP_API_CONDITION:                    condition: InterfaceCondition = await InterfaceConditionMapper.get_by_id(ident=content.target_id,                                                                                             session=session)                    await session.delete(condition)                await session.delete(content)    @classmethod    async def copy_content(cls, case_id: int, content_id: int):        """        复制步骤        """        async with async_session() as session:            async with session.begin():                case: InterFaceCaseModel = await cls.get_by_id(session=session, ident=case_id)                case.apiNum += 1                content = await InterfaceCaseStepContentMapper.copy_content(content_id=content_id, session=session)                case_step_index = await get_case_step_content_last_index(case_id, session)                await session.execute(                    insert(InterfaceCaseStepContentAssociation).values(                        {                            "interface_case_id": case_id,                            "interface_case_content_id": content.id,                            "step_order": case_step_index + 1                        }                    )                )    @classmethod    async def copy_case(cls, case_id: int, user: User):        """        复制用例        """        pass    @classmethod    async def query_content(cls, case_id: int):        """        查询步骤返回        """        results = []        async with async_session() as session:            contents = await cls.query_content_step(case_id=case_id, session=session)            log.info(f"contents = {contents}")            return contents            # if not contents:            #     return []            # for content in contents:            #     obj = await InterfaceCaseStepContentMapper.get_type_obj(content_id=content.id, session=session)            #     results.append(obj)        # return results    @classmethod    async def remove_case(cls, case_id: int):        """        删除用例        删除关联        删除condition        """        async with async_session() as session:            async with session.begin():                case: InterFaceCaseModel = await cls.get_by_id(session=session, ident=case_id)                contents = await cls.query_content_step(case_id, session)                for content in contents:                    if content.content_type == CaseStepContentType.STEP_API_CONDITION:                        from .interfaceMapper import InterfaceConditionMapper                        condition: InterfaceCondition = await InterfaceConditionMapper.get_by_id(                            ident=content.target_id,                            session=session                        )                        await session.delete(condition)                    session.delete(condition)                await session.delete(case)    @staticmethod    async def query_content_step(case_id: int, session: AsyncSession) -> Sequence[InterfaceCaseStepContent]:        """        查询步骤        """        scalars_data = await session.scalars(            select(InterfaceCaseStepContent).join(                InterfaceCaseStepContentAssociation,                InterfaceCaseStepContent.id == InterfaceCaseStepContentAssociation.interface_case_content_id            ).where(                InterfaceCaseStepContentAssociation.interface_case_id == case_id            ).order_by(                InterfaceCaseStepContentAssociation.step_order            )        )        return scalars_data.all()    @classmethod    async def append_record(cls, creatorUser: User, recordId: str, caseId: int):        """        录制 append 用例        """        from .interfaceMapper import InterfaceMapper        try:            case: InterFaceCaseModel = await cls.get_by_id(ident=caseId)            if not case:                raise Exception("用例不存在")            recordApi = await InterfaceMapper.copy_record_2_api(recordId, creatorUser)            recordApi['name'] = recordApi['url'][:5] + '...'            recordApi['desc'] = f"{recordApi['method']} : {recordApi['url']} "            recordApi['is_common'] = 0            recordApi['status'] = "DEBUG"            recordApi['level'] = "P2"            recordApi['project_id'] = case.project_id            recordApi['module_id'] = case.module_id            api = await InterfaceMapper.save(creatorUser=creatorUser, **recordApi)            return await cls.association_apis(                interface_case_id=case.id,                interface_id_list=[api.id]            )        except Exception as e:            raise eclass InterfaceCaseStepContentMapper(Mapper):    __model__ = InterfaceCaseStepContent    @classmethod    async def add_content(cls,case_id:int, content_type: int, api_wait_time: int = None, api_script_text: str = None):        """        添加步骤        """        log.info(            f"add_content content_type = {content_type} api_wait_time={api_wait_time} api_script_text={api_script_text}")        async with async_session() as session:            async with session.begin():                content: InterfaceCaseStepContent = InterfaceCaseStepContent(                    content_type=content_type,                    api_wait_time=api_wait_time,                    api_script_text=api_script_text                )                await cls.add_flush_expunge(session, content)                case_step_index = await get_case_step_content_last_index(case_id, session)                await session.execute(                    insert(InterfaceCaseStepContentAssociation).values(                        {                            "interface_case_id": case_id,                            "interface_case_content_id": content.id,                            "step_order": case_step_index + 1                        }                    )                )    @classmethod    async def init_content(cls,                           session: AsyncSession,                           content_type: CaseStepContentType,                           target_id: int) -> InterfaceCaseStepContent:        """        初始化content        """        obj = await cls.get_obj_by_type(content_type, target_id, session)        content: InterfaceCaseStepContent = InterfaceCaseStepContent(            content_type=content_type,            target_id=target_id        )        # API        if content_type == CaseStepContentType.STEP_API:            content.content_name = obj.name            content.content_desc = obj.method        # GROUP        if content_type == CaseStepContentType.STEP_API_GROUP:            content.content_name = obj.name            content.content_desc = obj.description        # CONDITION        if content_type == CaseStepContentType.STEP_API_CONDITION:            pass        return await cls.add_flush_expunge(session, content)    @classmethod    async def get_type_obj(cls, content_id: int, session: AsyncSession):        """        通过type 获取 对于模型        """        from .interfaceMapper import InterfaceMapper, InterfaceGroupMapper, InterfaceConditionMapper        content: InterfaceCaseStepContent = await cls.get_by_id(ident=content_id, session=session)        if content.content_type == CaseStepContentType.STEP_API and content.target_id:            return await InterfaceMapper.get_by_id(ident=content.target_id, session=session)        if content.content_type == CaseStepContentType.STEP_API_GROUP and content.target_id:            return await InterfaceGroupMapper.get_by_id(ident=content.target_id, session=session)        if content.content_type == CaseStepContentType.STEP_API_CONDITION and content.target_id:            return await InterfaceConditionMapper.get_by_id(ident=content.target_id, session=session)    @classmethod    async def get_obj_by_type(cls, content_type: CaseStepContentType, target_id: int, session: AsyncSession) -> Union[        InterfaceModel,        InterfaceGroupModel,        InterfaceCondition    ]:        from .interfaceMapper import InterfaceMapper, InterfaceGroupMapper, InterfaceConditionMapper        if content_type == CaseStepContentType.STEP_API and target_id:            return await InterfaceMapper.get_by_id(ident=target_id, session=session)        if content_type == CaseStepContentType.STEP_API_GROUP and target_id:            return await InterfaceGroupMapper.get_by_id(ident=target_id, session=session)        if content_type == CaseStepContentType.STEP_API_CONDITION and target_id:            return await InterfaceConditionMapper.get_by_id(ident=target_id, session=session)    @classmethod    async def copy_content(cls, content_id: int, session: AsyncSession):        content: InterfaceCaseStepContent = await cls.get_by_id(ident=content_id, session=session)        new_content = cls.__model__(            content_name=content.content_name,            content_desc=content.content_desc,            content_type=content.content_type,            target_id=content.target_id        )        return await cls.add_flush_expunge(session, new_content)