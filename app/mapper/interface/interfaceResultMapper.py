#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceResultMapper# @Software: PyCharm# @Desc:from typing import Listfrom app.mapper import Mapperfrom app.mapper.interface.interfaceGroupMapper import InterfaceGroupMapperfrom app.model.interface import InterfaceResultModel, InterfaceCaseResultModel, InterfaceTaskResultModelfrom app.model import async_sessionfrom app.model.interface.interfaceResultModel import InterfaceGroupResult, InterfaceConditionResultfrom utils import MyLogurufrom sqlalchemy import delete, selectlog = MyLoguru().get_logger()class InterfaceResultMapper(Mapper):    __model__ = InterfaceResultModel    @classmethod    async def query_api_result_by_case(cls, caseResultId: int):        """        业务case 查询结果        """        interface_result = []        try:            async with async_session() as session:                query = await session.scalars(                    select(InterfaceResultModel).filter_by(interface_case_result_Id=caseResultId).order_by(                        cls.__model__.create_time))                results: List[InterfaceResultModel] = query.all()                current_group_id = None                current_condition_id = None                # 初始化 groupInfo 和 conditions                groupInfo = None                conditions = None                for result in results:                    if result.interface_group_result_id:                        # 处理 group 逻辑                        if current_group_id != result.interface_group_result_id:                            # 如果已经有之前的 group 数据，先添加到结果中                            if groupInfo is not None and groupInfo['data']:                                interface_result.append(groupInfo)                            # 创建新的 groupInfo                            groupInfo = {                                "group_id": result.interface_group_result_id,                                "is_group": True,                                "data": []                            }                            current_group_id = result.interface_group_result_id                        # 将当前结果添加到 group 中                        groupInfo["data"].append(result)                    elif result.interface_condition_result_id:                        # 处理 condition 逻辑                        if current_condition_id != result.interface_condition_result_id:                            # 如果已经有之前的 condition 数据，先添加到结果中                            if conditions is not None and conditions['data']:                                interface_result.append(conditions)                            # 创建新的 conditions                            conditions = {                                "condition_id": result.interface_condition_result_id,                                "is_condition": True,                                "data": []                            }                            current_condition_id = result.interface_condition_result_id                        # 将当前结果添加到 condition 中                        conditions["data"].append(result)                    else:                        # 直接添加 api 结果                        interface_result.append(result)                # 循环结束后，添加最后一个 group 或 condition（如果有）                if groupInfo is not None and groupInfo['data']:                    interface_result.append(groupInfo)                if conditions is not None and conditions['data']:                    interface_result.append(conditions)                for item in interface_result:                    log.debug(item)                    if isinstance(item, dict) and item.get("group_id"):                        group = await InterfaceGroupResultMapper.get_by_id(item.get("group_id"))                        item["groupName"] = group.group_name                        item["groupAPINums"] = group.group_api_num                        item['result'] = all(item.result == "SUCCESS" for item in item.get("data"))                    if isinstance(item, dict) and item.get("condition_id"):                        condition = await InterfaceConditionResultMapper.get_by_id(item.get("condition_id"))                        item["conditionName"] = condition.condition_name                        item["conditionAPINums"] = condition.condition_api_result_num                        item['result'] = all(item.result == "SUCCESS" for item in item.get("data"))                return interface_result        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_result(cls,                         **kwargs):        """        接口执行 初始化 结果        """        try:            async with async_session() as session:                async with session.begin():                    c = cls.__model__(                        **kwargs                    )                    await cls.add_flush_expunge(session, c)                    return c        except Exception as e:            log.exception(e)            raise eclass InterfaceCaseResultMapper(Mapper):    __model__ = InterfaceCaseResultModel    @classmethod    async def delete_by_caseId(cls, caseId: int):        """删除"""        try:            async with async_session() as session:                delete_stmt = delete(cls.__model__).where(                    InterfaceCaseResultModel.interfaceCaseID == caseId                )                await session.execute(delete_stmt)                await session.commit()        except Exception as e:            raise e    @classmethod    async def init(cls, **kwargs) -> InterfaceCaseResultModel:        """        初始化        :return:        """        try:            async with async_session() as session:                async with session.begin():                    c = cls.__model__(                        **kwargs                    )                    return await cls.add_flush_expunge(session, c)        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_result_field(cls, caseResult: InterfaceCaseResultModel):        try:            async with async_session() as session:                async with session.begin():                    await cls.add_flush_expunge(session, caseResult)        except Exception as e:            log.error(e)            raise eclass InterfaceTaskResultMapper(Mapper):    __model__ = InterfaceTaskResultModel    @classmethod    async def init(cls, **kwargs) -> InterfaceTaskResultModel:        """        初始化        :return:        """        try:            async with async_session() as session:                async with session.begin():                    t = cls.__model__(                        **kwargs                    )                    await cls.add_flush_expunge(session, t)                    return t        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_result_field(cls, caseResult: InterfaceTaskResultModel):        try:            async with async_session() as session:                async with session.begin():                    await cls.add_flush_expunge(session, caseResult)        except Exception as e:            log.error(e)            raise e    @classmethod    async def delete_by_taskId(cls, taskId: int):        """删除"""        try:            async with async_session() as session:                delete_stmt = delete(cls.__model__).where(                    InterfaceTaskResultModel.taskId == taskId                )                await session.execute(delete_stmt)                await session.commit()        except Exception as e:            raise eclass InterfaceGroupResultMapper(Mapper):    __model__ = InterfaceGroupResult    @classmethod    async def init_model(cls, group_name: str, group_api_num: int, interface_case_result_id: int):        try:            async with async_session() as session:                async with session.begin():                    result = InterfaceGroupResult(                        group_name=group_name,                        group_api_num=group_api_num,                        interface_case_result_id=interface_case_result_id                    )                    return await cls.add_flush_expunge(session, result)        except Exception as e:            log.exception(e)            raise eclass InterfaceConditionResultMapper(Mapper):    __model__ = InterfaceConditionResult    @classmethod    async def init_model(cls, condition_name: str, condition_api_num: int, interface_case_result_id: int):        try:            async with async_session() as session:                async with session.begin():                    result = InterfaceConditionResult(                        condition_name=condition_name,                        condition_api_result_num=condition_api_num,                        interface_case_result_id=interface_case_result_id                    )                    return await cls.add_flush_expunge(session, result)        except Exception as e:            log.exception(e)            raise e__all__ = [    "InterfaceResultMapper",    "InterfaceCaseResultMapper",    "InterfaceTaskResultMapper",    "InterfaceGroupResultMapper",    "InterfaceConditionResultMapper"]