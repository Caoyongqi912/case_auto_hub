#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceResultMapper# @Software: PyCharm# @Desc:from typing import Listfrom app.mapper import Mapperfrom app.mapper.interface.interfaceGroupMapper import InterfaceGroupMapperfrom app.model.interface import InterfaceResultModel, InterfaceCaseResultModel, InterfaceTaskResultModel, \    InterfaceGroupModelfrom app.model import async_sessionfrom utils import MyLogurufrom sqlalchemy import delete, selectlog = MyLoguru().get_logger()class InterfaceResultMapper(Mapper):    __model__ = InterfaceResultModel    @classmethod    async def query_api_result_by_case(cls, caseResultId: int):        interface_result = []        # 用于记录已经处理过的 groupId        processed_groups = set()        try:            async with async_session() as session:                query = await session.scalars(                    select(InterfaceResultModel).filter_by(interface_case_result_Id=caseResultId).order_by(                        cls.__model__.create_time))                results: List[InterfaceResultModel] = query.all()                for result in results:                    group_id = result.interfaceGroupId                    if group_id in processed_groups:                        continue                    if group_id is None:                        _groupInfo = {                            "groupId": None,                            "resultName": result.interfaceName,                            "data": [result],                            **result.map                        }                        interface_result.append(_groupInfo)                    else:                        _group: InterfaceGroupModel = await InterfaceGroupMapper.get_by_id(group_id,                                                                                           session)                        # 找到所有属于该 group_id 的接口                        group_data = [r.map for r in results if r.interfaceGroupId == _group.id]                        # 将 group_id 添加到已处理集合中                        processed_groups.add(_group.id)                        # 添加到结果中                        interface_result.append(                            {                                "groupId": _group.id,                                "isGroup": True,                                "groupName": _group.name,  # 这里可以根据需要修改为实际的组名                                "groupDesc": _group.description,  # 这里可以根据需要修改为实际的组名                                "data": group_data                            })                return interface_result        except Exception as e:            raise e    @classmethod    async def set_result(cls,                         **kwargs):        """        接口执行 初始化 结果        """        try:            async with async_session() as session:                async with session.begin():                    c = cls.__model__(                        **kwargs                    )                    await cls.add_flush_expunge(session, c)                    return c        except Exception as e:            log.exception(e)            raise eclass InterfaceCaseResultMapper(Mapper):    __model__ = InterfaceCaseResultModel    @classmethod    async def delete_by_caseId(cls, caseId: int):        """删除"""        try:            async with async_session() as session:                delete_stmt = delete(cls.__model__).where(                    InterfaceCaseResultModel.interfaceCaseID == caseId                )                await session.execute(delete_stmt)                await session.commit()        except Exception as e:            raise e    @classmethod    async def init(cls, **kwargs) -> InterfaceCaseResultModel:        """        初始化        :return:        """        try:            async with async_session() as session:                async with session.begin():                    c = cls.__model__(                        **kwargs                    )                    await cls.add_flush_expunge(session, c)                    return c        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_result_field(cls, caseResult: InterfaceCaseResultModel):        try:            async with async_session() as session:                async with session.begin():                    await cls.add_flush_expunge(session, caseResult)        except Exception as e:            log.error(e)            raise eclass InterfaceTaskResultMapper(Mapper):    __model__ = InterfaceTaskResultModel    @classmethod    async def init(cls, **kwargs) -> InterfaceTaskResultModel:        """        初始化        :return:        """        try:            async with async_session() as session:                async with session.begin():                    t = cls.__model__(                        **kwargs                    )                    await cls.add_flush_expunge(session, t)                    return t        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_result_field(cls, caseResult: InterfaceTaskResultModel):        try:            async with async_session() as session:                async with session.begin():                    await cls.add_flush_expunge(session, caseResult)        except Exception as e:            log.error(e)            raise e    @classmethod    async def delete_by_taskId(cls, taskId: int):        """删除"""        try:            async with async_session() as session:                delete_stmt = delete(cls.__model__).where(                    InterfaceTaskResultModel.taskId == taskId                )                await session.execute(delete_stmt)                await session.commit()        except Exception as e:            raise e