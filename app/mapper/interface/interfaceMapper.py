#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceMapper# @Software: PyCharm# @Desc:from typing import Listfrom sqlalchemy import select, insert, and_from sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy.sql.functions import countfrom app.mapper import Mapperfrom app.mapper.project.projectPart import ProjectPartMapperfrom app.model import async_sessionfrom app.model.base import User, CasePartfrom app.model.interface import InterfaceModel, InterFaceCaseModel, inter_case_associationfrom app.model.interface.interfaceScriptDescModel import InterfaceScriptDescfrom interface.recoder import Recordfrom utils import MyLogurulog = MyLoguru().get_logger()__all__ = ['InterfaceMapper', 'InterfaceCaseMapper', 'InterfaceScriptMapper']class InterfaceMapper(Mapper):    __model__ = InterfaceModel    @staticmethod    async def copy_record_2_api(recordId: str, creator: User):        """        录制转API        """        try:            recordInfos = await Record.query_record(creator.uid)            if not recordInfos:                raise Exception("未查询到录制信息")            for record in recordInfos:                if record.get("uid") == recordId:                    kwargs = {                        "env_id": -1,                        "url": record['url'],                        "desc": record['url'],                        "method": record['method'],                        "headers": record['headers'],                        "params": record['params'],                        "data": record['data'],                        "body": record['body'],                        "body_type": record['body_type']                    }                    return kwargs        except Exception as e:            raise e    @classmethod    async def save_record(cls, creatorUser: User, recordId: str, **kwargs):        """        录制转API        """        try:            record = await cls.copy_record_2_api(recordId, creatorUser)            kwargs.update(record)            return await cls.save(creatorUser=creatorUser, **kwargs)        except Exception as e:            raise    @classmethod    async def insert_api(cls, part_id: int, **kwargs) -> InterfaceModel:        try:            async with async_session() as session:                async with session.begin():                    part: CasePart = await ProjectPartMapper.get_by_id(ident=part_id)                    if not part.isRoot:                        kwargs['part_root_id'] = part.rootID                    else:                        kwargs['part_root_id'] = part.id                    model = cls.__model__(**kwargs)                    await cls.add_flush_expunge(session, model)                    return model        except Exception as e:            raise e    @classmethod    async def copy_api(cls, apiId: int, creator: User, session: AsyncSession = None,                       is_copy_name: bool = False) -> "InterfaceModel":        """        复制API        :param apiId: 待复制API        :param creator: 创建人        :param session: session        :param is_copy_name: 复制api name        """        try:            # 封装为一个内部函数，减少重复代码            async def copy_api_logic(session: AsyncSession):                target_api = await cls.get_by_id(ident=apiId, session=session)                target_api_map = target_api.copy_map                if not is_copy_name:                    target_api_map['name'] = target_api_map['name'] + "(副本)"                new_api = cls.__model__(                    **target_api_map,                    creator=creator.id,                    creatorName=creator.username                )                await cls.add_flush_expunge(session, new_api)                return new_api            # 使用一个session上下文管理器，如果没有传入session则创建一个            if session is None:                async with async_session() as session:                    async with session.begin():                        return await copy_api_logic(session)            else:                # 如果传入了session，直接使用它                return await copy_api_logic(session)        except Exception as e:            raise e    @classmethod    async def query_added(cls, beginTime: str, endTime: str):        """查询新增"""        try:            async with async_session() as session:                sql = select(InterfaceModel).join(CasePart,                                                  InterfaceModel.part_id == CasePart.id                                                  ).where(                    and_(                        InterfaceModel.create_time >= beginTime,                        InterfaceModel.create_time <= endTime                    )                )                sca = await session.scalars(sql)                data = sca.all()                return data        except Exception as e:            raise eclass InterfaceCaseMapper(Mapper):    __model__ = InterFaceCaseModel    @classmethod    async def append_record(cls, creatorUser: User, recordId: str, caseId: int):        """        录制 append 用例        """        try:            case = await cls.get_by_id(ident=caseId)            if not case:                raise Exception("用例不存在")            recordApi = await InterfaceMapper.copy_record_2_api(recordId, creatorUser)            recordApi['name'] = recordApi['url'][:5] + '...'            recordApi['desc'] = f"{recordApi['method']} : {recordApi['url']} "            recordApi['is_common'] = 0            recordApi['status'] = "DEBUG"            recordApi['level'] = "P2"            recordApi['project_id'] = case.project_id            recordApi['part_id'] = case.part_id            api = await InterfaceMapper.save(creatorUser=creatorUser, **recordApi)            return await cls.add_api(                caseId=case.id,                apiId=api.id            )        except Exception as e:            raise e    @classmethod    async def remove_api(cls, caseId: int, apiId: int):        """        删除关联的api        if common 解除关联        """        try:            async with async_session() as session:                async with session.begin():                    caseApi: InterFaceCaseModel = await cls.get_by_id(ident=caseId, session=session)                    api: InterfaceModel = await InterfaceMapper.get_by_id(ident=apiId, session=session)                    # 删除关联表数据                    await session.execute(inter_case_association.delete().where(                        inter_case_association.c.inter_case_id == caseId,                        inter_case_association.c.interface_id == apiId                    ))                    # 非公共用例直接删除                    if not api.is_common:                        await session.delete(api)                    # 中间表重新排序                    apis = await session.execute(                        select(InterfaceModel).join(                            inter_case_association,                            inter_case_association.c.interface_id == InterfaceModel.id                        ).where(                            inter_case_association.c.inter_case_id == caseId                        ).order_by(                            inter_case_association.c.step_order                        )                    )                    apis = apis.scalars().all()                    caseApi.apiNum = len(apis)                    for index, api in enumerate(apis, start=1):                        sql = inter_case_association.update().where(                            (inter_case_association.c.inter_case_id == caseId) &                            (inter_case_association.c.interface_id == api.id)                        ).values(step_order=index)                        await session.execute(sql)        except Exception as e:            raise e    @classmethod    async def reorder_apis(cls, caseId: int, apiIds: List[int]):        """        关联api 重新排序        """        try:            async with async_session() as session:                async with session.begin():                    for index, api in enumerate(apiIds, start=1):                        sql = inter_case_association.update().where(                            (inter_case_association.c.inter_case_id == caseId) &                            (inter_case_association.c.interface_id == api)                        ).values(step_order=index)                        await session.execute(sql)        except Exception as e:            raise e    @classmethod    async def query_interface_by_caseId(cls, caseId: int) -> List[InterfaceModel]:        """        根据接口id查询        """        try:            async with async_session() as session:                apis = await session.scalars(                    select(InterfaceModel).join(                        inter_case_association,                        inter_case_association.c.interface_id == InterfaceModel.id                    ).where(                        inter_case_association.c.inter_case_id == caseId                    ).order_by(                        inter_case_association.c.step_order                    )                )                return apis.all()        except Exception as e:            log.exception(e)            raise e    @classmethod    async def add_api(cls, caseId: int, apiId: int):        """        case 添加单个 api        """        try:            async with async_session() as session:                async with session.begin():                    api_case = await cls.get_by_id(ident=caseId, session=session)                    api_case.apiNum += 1                    last_step_index = await cls.get_last_index(session, caseId)                    await session.execute((insert(inter_case_association).values(                        dict(                            interface_id=apiId,                            inter_case_id=caseId,                            step_order=last_step_index + 1                        )                    )))        except Exception as e:            log.error(e)            raise e    @classmethod    async def add_common_apis(cls, caseId: int, commonApis: List[int]):        try:            async with async_session() as session:                async with session.begin():                    api_case = await cls.get_by_id(ident=caseId, session=session)                    api_case.apiNum += len(commonApis)                    last_step_index = await cls.get_last_index(session, caseId)                    log.debug(f"last_step = {last_step_index}")                    for index, apiId in enumerate(commonApis, start=last_step_index + 1):                        log.debug(f"index = {index} apiId = {apiId}")                        await session.execute((insert(inter_case_association).values(                            dict(                                interface_id=apiId,                                inter_case_id=caseId,                                step_order=index                            )                        )))        except Exception as e:            raise e    @classmethod    async def copy_case(cls, caseId: int, creator: User):        """        复制用例        """        try:            async with async_session() as session:                async with session.begin():                    targe_case: InterFaceCaseModel = await cls.get_by_id(ident=caseId, session=session)                    target_api_map = targe_case.copy_map                    target_api_map['title'] = target_api_map['title'] + "(副本)"                    new_case = InterFaceCaseModel(                        **target_api_map,                        creator=creator.id,                        creatorName=creator.username                    )                    await cls.add_flush_expunge(session, new_case)                    apiIds = await session.scalars(select(inter_case_association).where(                        inter_case_association.c.inter_case_id == caseId                    ).order_by(inter_case_association.c.step_order.desc()))                    apiIds = apiIds.all()                    if apiIds:                        new_apis = []                        for ident in apiIds:                            new_api: InterfaceModel = await InterfaceMapper.copy_api(ident,                                                                                     session=session,                                                                                     is_copy_name=True,                                                                                     creator=creator)                            new_apis.append(new_api)                        for index, api in enumerate(new_apis, start=1):                            await session.execute(insert(inter_case_association).values(                                dict(                                    interface_id=api.id,                                    inter_case_id=new_case.id,                                    step_order=index                                )))                        await session.flush()        except Exception as e:            log.error(e)            raise e    @classmethod    async def copy_case_api(cls, caseId: int, apiId: int, copyer: User):        """        复制用例中api 关联添加到底部        """        try:            async with async_session() as session:                async with session.begin():                    case = await cls.get_by_id(ident=caseId, session=session)                    case.apiNum += 1                    new_api = await InterfaceMapper.copy_api(apiId=apiId, creator=copyer,                                                             session=session)                    last_step_index = await cls.get_last_index(session, caseId)                    await session.execute((insert(inter_case_association).values(                        dict(                            interface_id=new_api.id,                            inter_case_id=caseId,                            step_order=last_step_index + 1                        )                    )))        except Exception as e:            raise e    @staticmethod    async def get_last_index(session: AsyncSession, caseId: int) -> int:        try:            sql = (                select(inter_case_association.c.step_order).where(                    inter_case_association.c.inter_case_id == caseId                ).order_by(inter_case_association.c.step_order.desc()).limit(1)            )            # Execute the query            log.debug(sql)            result = await session.execute(sql)            last_step_order = result.scalar()  # Fetch the first (and only) result            return last_step_order or 0        except Exception as e:            raise eclass InterfaceScriptMapper(Mapper):    __model__ = InterfaceScriptDesc