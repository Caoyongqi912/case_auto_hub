#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceMapper# @Software: PyCharm# @Desc:from os import killpgfrom typing import Listfrom sqlalchemy import select, desc, insert, funcfrom sqlalchemy.ext.asyncio import AsyncSessionfrom app.mapper import Mapperfrom app.model import async_sessionfrom app.model.base import Userfrom app.model.interface import InterfaceModel, InterFaceCaseModel, inter_case_associationfrom utils import MyLogurulog = MyLoguru().get_logger()class InterfaceMapper(Mapper):    __model__ = InterfaceModel    @classmethod    async def copy_api(cls, apiId: int, creator: User, session: AsyncSession = None,                       form_case: bool = False) -> "InterfaceModel":        """        复制API        """        try:            if session is None:                async with async_session() as session:                    async with session.begin():                        target_api: "InterfaceModel" = await cls.get_by_id(ident=apiId, session=session)            else:                target_api: "InterfaceModel" = await  cls.get_by_id(ident=apiId, session=session)            target_api_map = target_api.copy_map            if not form_case:                target_api_map['name'] = target_api_map['name'] + "(副本)"            new_api = cls.__model__(                **target_api_map,                creator=creator.id,                creatorName=creator.username            )            await cls.add_flush_expunge(session, new_api)            return new_api        except Exception as e:            raise eclass InterfaceCaseMapper(Mapper):    __model__ = InterFaceCaseModel    @classmethod    async def remove_api(cls, caseId: int, apiId: int):        """        删除关联的api        if common 解除关联        """        try:            async with async_session() as session:                async with session.begin():                    caseApi: InterFaceCaseModel = await cls.get_by_id(ident=caseId, session=session)                    caseApi.apiNum -= 1                    api: InterfaceModel = await InterfaceMapper.get_by_id(ident=apiId, session=session)                    # 删除关联表数据                    await session.execute(inter_case_association.delete().where(                        inter_case_association.c.inter_case_id == caseId,                        inter_case_association.c.interface_id == apiId                    ))                    # 非公共用例直接删除                    if not api.is_common:                        await session.delete(api)                    # 中间表重新排序                    apis = await session.execute(                        select(InterfaceModel).join(                            inter_case_association,                            inter_case_association.c.interface_id == InterfaceModel.id                        ).where(                            inter_case_association.c.inter_case_id == caseId                        ).order_by(                            inter_case_association.c.step_order                        )                    )                    apis = apis.scalars().all()                    for index, api in enumerate(apis, start=1):                        sql = inter_case_association.update().where(                            (inter_case_association.c.inter_case_id == caseId) &                            (inter_case_association.c.interface_id == api.id)                        ).values(step_order=index)                        await session.execute(sql)        except Exception as e:            raise e    @classmethod    async def reorder_apis(cls, caseId: int, apiIds: List[int]):        """        关联api 重新排序        """        try:            async with async_session() as session:                async with session.begin():                    for index, api in enumerate(apiIds, start=1):                        sql = inter_case_association.update().where(                            (inter_case_association.c.inter_case_id == caseId) &                            (inter_case_association.c.interface_id == api)                        ).values(step_order=index)                        await session.execute(sql)        except Exception as e:            raise e    @classmethod    async def query_interface_by_caseId(cls, caseId: int) -> List[InterfaceModel]:        """        根据接口id查询        """        try:            async with async_session() as session:                apis = await session.scalars(                    select(InterfaceModel).join(                        inter_case_association,                        inter_case_association.c.interface_id == InterfaceModel.id                    ).where(                        inter_case_association.c.inter_case_id == caseId                    ).order_by(                        inter_case_association.c.step_order                    )                )                return apis.all()        except Exception as e:            raise e    @classmethod    async def add_api(cls, caseId: int, apiId: int):        """        case 添加单个 api        """        try:            async with async_session() as session:                async with session.begin():                    api_case = await cls.get_by_id(ident=caseId, session=session)                    api_case.apiNum += 1                    last_step_index = await cls.get_last_index(session, caseId)                    await session.execute((insert(inter_case_association).values(                        dict(                            interface_id=apiId,                            inter_case_id=caseId,                            step_order=last_step_index + 1                        )                    )))        except Exception as e:            raise e    @classmethod    async def copy_case(cls, caseId: int, creator: User):        """        复制用例        """        try:            async with async_session() as session:                async with session.begin():                    targe_case: InterFaceCaseModel = await cls.get_by_id(ident=caseId, session=session)                    target_api_map = targe_case.copy_map                    target_api_map['title'] = target_api_map['title'] + "(副本)"                    new_case = InterFaceCaseModel(                        **target_api_map,                        creator=creator.id,                        creatorName=creator.username                    )                    await cls.add_flush_expunge(session, new_case)                    apiIds = await session.scalars(select(inter_case_association).where(                        inter_case_association.c.inter_case_id == caseId                    ).order_by(inter_case_association.c.step_order.desc()))                    apiIds = apiIds.all()                    if apiIds:                        new_apis = []                        for ident in apiIds:                            new_api: InterfaceModel = await InterfaceMapper.copy_api(ident,                                                                                     session=session,                                                                                     form_case=True,                                                                                     creator=creator)                            new_apis.append(new_api)                        for index, api in enumerate(new_apis, start=1):                            await session.execute(insert(inter_case_association).values(                                dict(                                    interface_id=api.id,                                    inter_case_id=new_case.id,                                    step_order=index                                )))                        await session.flush()        except Exception as e:            raise e    @classmethod    async def copy_case_api(cls, caseId: int, apiId: int, copyer: User):        """        复制用例中api 关联添加到底部        """        try:            async with async_session() as session:                async with session.begin():                    case = await cls.get_by_id(ident=caseId, session=session)                    case.apiNum += 1                    new_api = await InterfaceMapper.copy_api(apiId=apiId, creator=copyer,                                                             session=session)                    last_step_index = await cls.get_last_index(session, caseId)                    await session.execute((insert(inter_case_association).values(                        dict(                            interface_id=new_api.id,                            inter_case_id=caseId,                            step_order=last_step_index + 1                        )                    )))        except Exception as e:            raise e    @staticmethod    async def get_last_index(session: AsyncSession, caseId: int) -> int:        try:            sql = (                select(inter_case_association).where(                    inter_case_association.c.inter_case_id == caseId                ).order_by(inter_case_association.c.step_order.desc()).limit(1)            )            # Execute the query            result = await session.execute(sql)            last_step_order = result.scalar()  # Fetch the first (and only) result            return last_step_order or 0        except Exception as e:            raise e__all__ = ['InterfaceMapper', 'InterfaceCaseMapper']