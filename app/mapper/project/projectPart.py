#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/20# @Author : cyq# @File : projectPart# @Software: PyCharm# @Desc:from typing import Type, Listfrom sqlalchemy import select, and_from app.mapper import Mapperfrom model import async_sessionfrom model.project import CasePart, Projectclass ProjectPartMapper(Mapper):    __model__ = CasePart    @staticmethod    async def query_parent_part_by_projectId(project_id: int) -> List[CasePart]:        """        通过projectID 查询父级目录        :param project_id:        :return:        """        try:            async with async_session() as session:                sql = select(CasePart).where(                    and_(                        CasePart.isRoot == 1,                        CasePart.projectID == project_id                    ))                exe = await session.execute(sql)                return exe.scalars().all()        except Exception as e:            raise e    @classmethod    async def query_by(cls, **kwargs) -> List[dict]:        queryParts: List[CasePart] = await super().query_by(**kwargs)        parts = [part.map for part in queryParts]        return await ProjectPartMapper.list2Tree(parts)    @staticmethod    async def list2Tree(data: List):        """        列表转树        :param data:        :return:        """        mapping: dict = dict(zip([i['id'] for i in data], data))        c = []        for d in data:            parent: dict = mapping.get(d['parentID'])            if parent is None:                c.append(d)            else:                children: list = parent.get("children")                if not children:                    children = []                children.append(d)                parent.update({"children": children})        return c