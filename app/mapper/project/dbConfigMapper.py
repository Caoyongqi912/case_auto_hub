#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/2/17# @Author : cyq# @File : dbConfigMapper# @Software: PyCharm# @Desc:from app.exception import CommonErrorfrom app.mapper import Mapperfrom app.model import async_sessionfrom app.model.base import Userfrom app.model.base.db_config import DBConfigfrom enums import DBTypeEnumfrom interface.execDBScript import ExecDBScriptfrom interface.io_sender import APISocketSenderfrom utils import RedisClient, logfrom utils.mysqlClient import MySqlClientfrom utils.oracleClient import OracleClientclass DbConfigMapper(Mapper):    __model__ = DBConfig    @classmethod    async def try_script(cls, db_id: int, script: str, user: User):        """        调试 db 脚本        """        io = APISocketSender(user.uid)        execScript = ExecDBScript(io=io, script_str=script, onlySearch=True)        try:            async with async_session() as session:                dbConfig = await cls.get_by_id(db_id, session)            match dbConfig.db_type:                case DBTypeEnum.MYSQL:                    return await execScript.exec_sql(**dbConfig.config)                case DBTypeEnum.ORACLE:                    return await execScript.exec_oracle(**dbConfig.config)                case DBTypeEnum.REDIS:                    return await execScript.exec_redis(**dbConfig.config)                case _:                    raise CommonError("不支持类型")        except Exception as e:            raise e    @staticmethod    async def test_connect(db_type: int, db_host, db_port, db_username, db_password, db_database, **kwargs):        match db_type:            case DBTypeEnum.MYSQL:                return await MySqlClient.connect(db_host, db_port, db_username, db_password, db_database)            case DBTypeEnum.ORACLE:                return await OracleClient.test_connect(db_host, db_port, db_username, db_password, db_database)            case DBTypeEnum.REDIS:                return await RedisClient.connect(db_host, db_port, db_username, db_password, db_database)            case _:                raise CommonError("不支持类型")