#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/9# @Author : cyq# @File : uiCaseResultMapper# @Software: PyCharm# @Desc:from datetime import datetimefrom typing import Any, List, Dictfrom app.mapper.file import FileMapperfrom app.model import async_sessionfrom sqlalchemy import update, delete, select, and_from app.model.ui import UICaseModel, UITaskModel, UICaseTaskResultBaseModel, UIResultModelfrom app.model.base import Userfrom app.mapper import Mapperfrom utils import logfrom enums.CaseEnum import Status, Resultfrom datetime import dateclass UICaseResultMapper(Mapper):    __model__ = UIResultModel    @staticmethod    async def clear_case_result(caseId: int):        try:            async with async_session() as session:                async with session.begin():                    search_sql = select(UIResultModel.ui_case_err_step_pic_path).where(                        and_(                            UIResultModel.result == Result.FAIL,                            UIResultModel.ui_case_Id == caseId                        )                    )                    data = await session.scalars(search_sql)                    datas = data.all()                    file_ids = [i.split("uid=")[-1] for i in datas if i]                    for i in file_ids:                        await FileMapper.remove_file(i, session)                    delete_sql = delete(UIResultModel).filter_by(ui_case_Id=caseId)                    await session.execute(delete_sql)        except Exception as e:            session.rollback()            log.error(e)            raise e    @classmethod    async def init_case_result_model(cls, case: UICaseModel,                                     user: User = None,                                     baseId: int = None) -> UIResultModel:        """        初始化用例结果模型        :param case: 运行case        :param user: 运行人        :param baseId:        :return:        """        try:            async with async_session() as session:                async with session.begin():                    result = UIResultModel(                        ui_case_Id=case.id,                        ui_case_name=case.title,                        ui_case_description=case.description,                        ui_case_step_num=case.step_num,                        starter_id=user.id if user else 9999,                        starter_name=user.username if user else "ROBOT",                        start_time=datetime.now(),                        ui_case_base_id=baseId,                    )                    await cls.add_flush_expunge(session, result)                    return result        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_case_result(cls, result: UIResultModel):        try:            async with async_session() as session:                async with session.begin():                    await cls.add_flush_expunge(session, result)                    return result        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_case_result_assertInfo(cls, crId: int, assertsInfo: List[Dict[str, Any]]):        try:            async with async_session() as session:                async with session.begin():                    update_sql = update(UIResultModel).where(UIResultModel.id == crId).values(asserts_info=assertsInfo)                    await session.execute(update_sql)        except Exception as e:            raise eclass UICaseTaskResultBaseMapper(Mapper):    __model__ = UICaseTaskResultBaseModel    @staticmethod    async def init_task_base_result_model(totalNumber: int,                                          task: UITaskModel,                                          user: User = None):        try:            async with async_session() as session:                base_result = UICaseTaskResultBaseModel()                base_result.status = Status.RUNNING                base_result.totalNumber = totalNumber                base_result.taskId = task.id                base_result.taskUid = task.uid                base_result.taskName = task.title                base_result.runDay = date.today()                if user:                    base_result.startBy = 1                    base_result.starterName = user.username                    base_result.starterId = user.id                else:                    base_result.startBy = 2                    base_result.starterName = "ROBOT"                session.add(base_result)                await session.commit()                session.expunge(base_result)                return base_result        except Exception as e:            log.error(e)            raise e    @staticmethod    async def set_base_result(result: UICaseTaskResultBaseModel):        try:            async with async_session() as session:                session.add(result)                await session.commit()        except Exception as e:            log.error(e)            raise eif __name__ == '__main__':    a = ['127.0.0.1/file/ui_case/uid=5fb6c656', '127.0.0.1/file/ui_case/uid=4f4aa981',         'http://127.0.0.1:5050/file/ui_case/uid=aab7664c', 'http://127.0.0.1:5050/file/ui_case/uid=9188fbe9']    b = [i.split("uid=")[-1] for i in a if i]    print(b)