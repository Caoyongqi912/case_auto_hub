#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/9# @Author : cyq# @File : uiCaseResultMapper# @Software: PyCharm# @Desc:from datetime import datetimefrom typing import Any, List, Dictfrom app.mapper.file import FileMapperfrom app.model import async_sessionfrom sqlalchemy import update, delete, select, and_from app.model.ui import UICaseModel, UITaskModel, UICaseTaskResultBaseModel, UIResultModelfrom app.model.base import Userfrom app.mapper import Mapperfrom utils import logfrom enums.CaseEnum import Status, Resultfrom datetime import dateclass UICaseResultMapper(Mapper):    __model__ = UIResultModel    @staticmethod    async def clear_case_result(caseId: int):        try:            async with async_session() as session:                async with session.begin():                    # 查找失败结果 删除本地附件                    search_sql = select(UIResultModel.ui_case_err_step_pic_path).where(                        and_(                            UIResultModel.result == Result.FAIL,                            UIResultModel.ui_case_Id == caseId,                            UIResultModel.ui_case_base_id == None                        )                    )                    data = await session.scalars(search_sql)                    datas = data.all()                    file_ids = [i.split("uid=")[-1] for i in datas if i]                    for i in file_ids:                        await FileMapper.remove_file(i, session)                    delete_sql = delete(UIResultModel).filter_by(ui_case_Id=caseId,ui_case_base_id=None)                    await session.execute(delete_sql)        except Exception as e:            session.rollback()            log.error(e)            raise e    @classmethod    async def init_case_result_model(cls, case: UICaseModel,                                     user: User = None,                                     baseId: int = None) -> UIResultModel:        """        初始化用例结果模型        :param case: 运行case        :param user: 运行人        :param baseId:        :return:        """        try:            async with async_session() as session:                async with session.begin():                    result = UIResultModel(                        ui_case_Id=case.id,                        ui_case_name=case.title,                        ui_case_description=case.description,                        ui_case_step_num=case.step_num,                        starter_id=user.id if user else 9999,                        starter_name=user.username if user else "ROBOT",                        start_time=datetime.now(),                        ui_case_base_id=baseId,                    )                    await cls.add_flush_expunge(session, result)                    return result        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_case_result(cls, result: UIResultModel):        try:            async with async_session() as session:                async with session.begin():                    await cls.add_flush_expunge(session, result)                    return result        except Exception as e:            log.error(e)            raise e    @classmethod    async def set_case_result_assertInfo(cls, crId: int, assertsInfo: List[Dict[str, Any]]):        try:            async with async_session() as session:                async with session.begin():                    update_sql = update(UIResultModel).where(UIResultModel.id == crId).values(asserts_info=assertsInfo)                    await session.execute(update_sql)        except Exception as e:            raise eclass UICaseTaskResultBaseMapper(Mapper):    __model__ = UICaseTaskResultBaseModel    @classmethod    async def init_task_base_result_model(cls, task: UITaskModel,                                          user: User = None):        """        初始化任务基础结果模型。        该方法用于根据给定的任务模型和用户信息（如果提供），创建并初始化一个任务基础结果模型实例。        它会将任务的相关信息和用户信息（如果存在）保存到数据库中。        参数:        - task: UITaskModel类型，表示一个UI任务模型实例。        - user: User类型，表示一个用户实例，默认为None。如果提供，则表示该任务是由该用户启动的。        返回:        返回初始化后的任务基础结果模型实例。        """        try:            # 创建数据库会话            async with async_session() as session:                async with session.begin():                    # 创建任务基础结果模型实例并设置基本属性                    base_result = UICaseTaskResultBaseModel(                        status=Status.RUNNING,                        total_number=task.ui_case_num,                        task_id=task.id,                        task_uid=task.uid,                        task_name=task.title,                        run_day=date.today(),                        project_id=task.project_id,                        part_id=task.part_id                    )                    # 根据用户是否存在，设置启动任务的方式和启动者信息                    if user:                        base_result.start_by = 1                        base_result.starter_name = user.username                        base_result.starter_id = user.id                    else:                        base_result.start_by = 2                        base_result.starter_name = "ROBOT"                    # 将任务基础结果模型实例添加到数据库会话中，并刷新会话                    await cls.add_flush_expunge(session, base_result)                    return base_result        except Exception as e:            raise e    @staticmethod    async def set_base_result(result: UICaseTaskResultBaseModel):        try:            async with async_session() as session:                session.add(result)                await session.commit()        except Exception as e:            log.error(e)            raise e