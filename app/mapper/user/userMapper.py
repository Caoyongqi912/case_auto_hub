#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : userMapper# @Software: PyCharm# @Desc:from enums import GenderEnumfrom model import async_sessionfrom sqlalchemy import or_, select, funcfrom model.user import User, UserDepartmentfrom app.mapper import Mapperfrom app.exception import DBErrorclass UserMapper(Mapper):    __model__ = User    @staticmethod    async def register(username: str,                       gender: GenderEnum,                       phone: str,                       departmentID: int | None = None,                       isAdmin: bool = False,                       tagName: str = None):        """        管理注册用户        :param username:        :param gender:        :param phone:        :param departmentID:        :param isAdmin:        :param tagName:        :return:        """        email = username + "@5i5j.com"        try:            async with async_session() as session:                async with session.begin():                    users = await session.execute(select(User).where(or_(User.email == email,                                                                         User.phone == phone)))                    if users.scalars().first():                        raise DBError(f"用户 {username} 邮箱或电话已存在")                    depart = await session.execute(select(UserDepartment).where(UserDepartment.id == departmentID))                    depart = depart.scalars().first()                    if not depart:                        raise DBError(f"部门不存在")                    user = User(username=username,                                password=User.set_password(username + "+pass"),                                email=email,                                phone=phone,                                gender=gender,                                isAdmin=isAdmin,                                tagName=tagName,                                departmentName=depart.name,                                departmentID=depart.id)                    session.add(user)        except Exception as e:            raise e