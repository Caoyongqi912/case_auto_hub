#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : userMapper# @Software: PyCharm# @Desc:import timeimport jwtfrom jwt.exceptions import ExpiredSignatureErrorfrom app.exception.err_handle_func import AuthErrorfrom config import Configfrom werkzeug.security import generate_password_hash, check_password_hashfrom app.exception import DBErrorfrom app.mapper import Mapperfrom app.model import async_sessionfrom app.model.base import Userfrom enums import GenderEnumfrom utils import MyLogurulog = MyLoguru().get_logger()class UserMapper(Mapper):    __model__ = User    @classmethod    async def register(cls,                       username: str,                       gender: GenderEnum,                       phone: str,                       isAdmin: bool = False,                       tagName: str = None):        """        管理注册用户        :param username:        :param gender:        :param phone:        :param isAdmin:        :param tagName:        :return:        """        try:            async with async_session() as session:                async with session.begin():                    email = username + "@hub.com"                    user = await cls.get_by(session=session, email=email, phone=phone)                    if user:                        raise AuthError(f"用户 {username} 已存在")                    pwd_hash = await cls.set_password(username)                    session.add(User(username=username,                                     password=pwd_hash,                                     email=email,                                     phone=phone,                                     gender=gender,                                     isAdmin=isAdmin,                                     tagName=tagName,                                     # departmentName=depart.name,                                     # departmentID=depart.id                                     ))        except Exception as e:            raise e    @classmethod    async def register_admin(cls,                             username: str):        """        注册ADMIN        :param username:        :return:        """        try:            async with async_session() as session:                _pwd_hash = await cls.set_password(username)                session.add(User(username=username,                                 email=username + "@hub.com",                                 password=_pwd_hash,                                 phone="99999999999",                                 gender=GenderEnum.MALE,                                 isAdmin=True,                                 tagName="ADMIN",                                 ))                await session.commit()        except Exception as e:            raise e    @classmethod    async def login(cls, username: str, password: str):        """        用户登陆        :param username:        :param password:        :return:        """        try:            async with async_session() as session:                user = await cls.get_by(session=session, username=username)                if user:                    if await cls.check_password(user.password, password):                        return await cls.generate_token(user)                    else:                        raise AuthError("密码错误")                else:                    raise AuthError("用户不存在")        except Exception as e:            log.exception(e)            raise e    @staticmethod    async def set_password(password: str) -> str:        """hash 密码"""        return generate_password_hash(password)    @staticmethod    async def check_password(password_hash: str, password: str) -> bool:        """校验密码"""        return check_password_hash(password_hash, password)    @staticmethod    async def generate_token(user: User, expires_time: int = 3600 * 24 * 2) -> str:        """        生成token        param user 当前用户        param expires_time 超时时间        """        token = {"id": user.id,                 "isAdmin": user.isAdmin,                 "expires_time": time.time() + expires_time}        try:            return jwt.encode(token, Config.SECRET_KEY, algorithm="HS256")        except ExpiredSignatureError:            raise AuthError("token过期")        except Exception:            raise AuthError("登录状态校验失败, 请重新登录")    @staticmethod    async def parse_token(token: str) -> dict:        """        解析token        :param token:        :return:        """        try:            return jwt.decode(token, Config.SECRET_KEY, algorithms=["HS256"])        except ExpiredSignatureError:            raise AuthError("token过期")        except Exception:            raise AuthError("token解析失败")