#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : userMapper# @Software: PyCharm# @Desc:from enums import GenderEnumfrom app.model import async_sessionfrom app.model.base import Userfrom app.mapper import Mapperfrom app.exception import DBErrorfrom werkzeug.security import generate_password_hashclass UserMapper(Mapper):    __model__ = User    @classmethod    async def register(cls,                       username: str,                       gender: GenderEnum,                       phone: str,                       isAdmin: bool = False,                       tagName: str = None):        """        管理注册用户        :param username:        :param gender:        :param phone:        :param isAdmin:        :param tagName:        :return:        """        try:            async with async_session() as session:                async with session.begin():                    email = username + "@hub.com"                    user = await cls.get_by(session=session, email=email, phone=phone)                    if user:                        raise DBError(f"用户 {username} 已存在")                    session.add(User(username=username,                                     password=cls.set_password(username + "+pass"),                                     email=email,                                     phone=phone,                                     gender=gender,                                     isAdmin=isAdmin,                                     tagName=tagName,                                     # departmentName=depart.name,                                     # departmentID=depart.id                                     ))        except Exception as e:            raise e    @classmethod    async def register_admin(cls,                             username: str):        """        注册ADMIN        :param username:        :return:        """        try:            async with async_session() as session:                session.add(User(username=username,                                 email=username + "@hub.com",                                 password=cls.set_password(username),                                 phone="99999999999",                                 gender=GenderEnum.MALE,                                 isAdmin=True,                                 tagName="ADMIN",                                 ))                await session.commit()        except Exception as e:            raise e    @staticmethod    def set_password(password: str) -> str:        return generate_password_hash(password)