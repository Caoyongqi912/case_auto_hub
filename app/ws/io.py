#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/8/15# @Author : cyq# @File : __init__.py# @Software: PyCharm# @Desc:from typing import Dict, Anyfrom urllib.parse import parse_qsfrom utils import logfrom socketio import AsyncServer, ASGIAppSOCKETIO_PATH = 'socket.io'class IoASGIApp(ASGIApp):    def __init__(self):        super().__init__(            socketio_server=async_io,            socketio_path=SOCKETIO_PATH        )class AsyncIOServerManager(AsyncServer):    clientIds: Dict[str, str] = {}    def __init__(self):        super().__init__(            cors_allowed_origins="*",            async_mode='asgi'        )    async def emit(self, event: str, data: Any = None, uid: str = None, **kwargs):        """        发送事件到指定用户所在的房间。        参数:        - event (str): 事件名称。        - data (Any): 事件数据，默认为 None。        - uid (str): 用户唯一标识符，默认为 None。        - **kwargs: 其他可选参数。        注意:        - 如果 uid 对应的 room 不存在，则不会发送事件。        """        try:            room = self.clientIds.get(uid, None)            if room:                return await super().emit(event, data, room=room, namespace="/ws")        except Exception as e:            log.error(e)            raise e    def push_emit(self, data: Any, uid: str):        try:            room = self.clientIds.get(uid, None)            if room:                return self.emit("push_message", data, room=room, namespace="/ws")        except Exception as e:            log.error(e)            raise e    async def data_emit(self, data: Any, uid: str):        try:            room = self.clientIds.get(uid, None)            if room:                return await self.emit('data_message', data, room=room, namespace="/ws")        except Exception as e:            log.error(e)            raise e    async def log_emit(self, data: str, uid: str):        try:            room = self.clientIds.get(uid, None)            if room:                return await self.emit('message', {"code": 0, 'data': f"{data}"}, room=room, namespace="/ws")        except Exception as e:            log.error(e)            raise e    async def log_emit_over(self, uid: str, **kwargs):        try:            room = self.clientIds.get(uid, None)            if room:                await self.emit('message', {"code": 1, 'data': {**kwargs}}, room=room, namespace="/ws")                # await self.disconnect(sid=room, namespace="/ws")        except Exception as e:            raise easync_io = AsyncIOServerManager()asgi_app = IoASGIApp()@async_io.on("connect", namespace="/ws")async def connect(sid, env):    params = parse_qs(env.get("QUERY_STRING", ""))  # 解析查询字符串    # 获取 clientId 参数    clientId = params.get('clientId', [None])[0]  # 如果没有 clientId，返回 None    if clientId:        async_io.clientIds[clientId] = sid        log.debug(f"SID={sid} , ClientId={clientId} connect ")@async_io.on("disconnect", namespace="/ws")async def disconnect(sid):    log.info(f"{sid} disconnect")