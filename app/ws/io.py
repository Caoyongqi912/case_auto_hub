#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/8/15# @Author : cyq# @File : __init__.py# @Software: PyCharm# @Desc:from typing import Dictfrom urllib.parse import parse_qsfrom fastapi import FastAPIfrom utils import logfrom socketio import AsyncServer, ASGIAppSOCKETIO_PATH = 'socket.io'class IoASGIApp(ASGIApp):    def __init__(self):        super().__init__(            socketio_server=io,            socketio_path=SOCKETIO_PATH        )class IOServerManager(AsyncServer):    clientIds: Dict[str, str] = {}    def __init__(self):        super().__init__(            cors_allowed_origins="*",            async_mode='asgi'        )    async def log_emit(self, data: str, uid: str):        try:            room = self.clientIds.get(uid, None)            if room:                return await self.emit('message', {"code": 0, 'data': f"{data}"}, room=room, namespace="/ws")        except Exception as e:            log.error(e)            raise e    async def log_emit_over(self, uid: str, **kwargs):        try:            room = self.clientIds.get(uid, None)            if room:                await self.emit('message', {"code": 1, 'data': {**kwargs}}, room=room, namespace="/ws")                # await self.disconnect(sid=room, namespace="/ws")        except Exception as e:            raise eio = IOServerManager()app = IoASGIApp()@io.on("connect", namespace="/ws")async def connect(sid, env):    params = parse_qs(env.get("QUERY_STRING", ""))  # 解析查询字符串    # 获取 clientId 参数    clientId = params.get('clientId', [None])[0]  # 如果没有 clientId，返回 None    if clientId:        io.clientIds[clientId] = sid        log.debug(f"SID={sid} , ClientId={clientId} connect ")@io.on("disconnect", namespace="/ws")async def disconnect(sid):    log.info(f"{sid} disconnect")