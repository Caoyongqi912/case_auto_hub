#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/8/27# @Author : cyq# @File : testCaseSchema# @Software: PyCharm# @Desc:from typing import List, Optionalfrom pydantic import BaseModel, Fieldfrom app.schema import PageSchemafrom enums import ModuleEnumfrom enums.CaseEnum import CaseLevelclass TestCaseStep(BaseModel):    action: Optional[str] = None    expected_result: Optional[str] = None    id: Optional[int] = Noneclass SetTestCaseSubStepSchema(BaseModel):    test_case_id: int    case_sub_steps: List[TestCaseStep] = Noneclass TestCaseField(BaseModel):    case_name: Optional[str] = Field(None)    case_level: Optional[str] = Field(CaseLevel.P2)    case_type: Optional[int] = Field(1, description=" 1'普通' | 2'冒烟' | 3 回归")    case_tag: Optional[str] = Field(None)    case_setup: Optional[str] = Field(None)    case_status: Optional[int] = Field(0)    case_mark: Optional[str] = Field(None)    is_review: Optional[bool] = Field(False)    module_id: Optional[int] = Field(None)    project_id: Optional[int] = Field(None)    case_sub_steps: List[TestCaseStep] | None = Noneclass AddTestCaseSchema(TestCaseField):    requirementId: Optional[int] = Field(None)    case_name: str    case_tag: str    case_mark: Optional[str] = Field(None)    module_id: Optional[int] = Field(None)    project_id: Optional[int] = Field(None)class UpdateTestCaseSchema(TestCaseField):    id: intclass PageTestCaseSchema(PageSchema, TestCaseField):    module_type: int = ModuleEnum.CASEclass QueryTestCaseSchemaByReq(BaseModel):    requirementId: intclass CopyCase(BaseModel):    caseId: int    requirementId: Optional[int] = Field(None)class CopyCaseStep(BaseModel):    stepId: intclass ReorderCase(BaseModel):    requirementId: int    caseIds: List[int]class ReorderCaseStep(BaseModel):    stepIds: List[int]