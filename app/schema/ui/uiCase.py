#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/21# @Author : cyq# @File : uiCase# @Software: PyCharm# @Desc:import enumfrom typing import List, Mapping, Anyfrom pydantic import BaseModel, Field, field_validatorfrom app.schema import PageSchemafrom enums import ModuleEnumfrom enums.CaseEnum import CaseStatus, CaseLevelfrom utils import GenerateToolsclass AddUICaseBaseSchema(BaseModel):    title: str    description: str    level: str = Field(..., title="用例等级")    status: str = Field(..., title="用例状态")    env_id: str    step_num: int = 0    module_id: int    project_id: int    @field_validator('level')    def level_must_be_valid(cls, v):        if v is not None:            try:                return CaseLevel[v].value            except KeyError:                raise ValueError(f"Invalid level: {v}")        return v    @field_validator('status')    def status_must_be_valid(cls, v):        if v is not None:            try:                return CaseStatus[v].value            except KeyError:                raise ValueError(f"Invalid status: {v}")        return vclass EditUICaseBaseSchema(BaseModel):    id: int    title: str | None = None    description: str | None = None    level: str | None = None    status: str | None = None    env_id: str | None = None    module_id: int | None = None    project_id: int | None = Noneclass OPTUICaseBaseSchema(BaseModel):    caseId: int | strclass ChoiceUICaseBaseSchema(BaseModel):    caseId: int    choices: List[int]class UICaseField(BaseModel):    id: int | None = None    title: str | None = None    uid: str | None = None    module_id: int | None = None    project_id: int | None = None    creator: int | None = None    creatorName: str | None = None    status: CaseStatus | None = None    level: CaseLevel | None = None    env_id: str | None = None    env_name: str | None = Noneclass UISearchByDate(BaseModel):    projectId: int    st: str | None = GenerateTools.getMonthFirst(),    et: str | None = GenerateTools.getTime(2)class GetOrDeleteUICaeVariable(BaseModel):    uid: strclass InsertUICaseVariable(BaseModel):    key: str    value: str    caseId: int    creator: intclass UpdateUICaseVariable(BaseModel):    uid: str    key: str | None = None    value: str | None = None    updater: int | None = Noneclass UICasePage(PageSchema, UICaseField):    sort: dict | None = None    module_type: int = Field(ModuleEnum.UI_CASE, title="模块类型")class UIVariablesPage(PageSchema):    caseId: intclass RunUITaskByJK(BaseModel):    taskIds: List[int]    userId: int    jobName: str | None = Noneclass AddUICaseStepWithGroup(BaseModel):    caseId: int    groupIds: List[int]class ExecuteUICaseSchema(BaseModel):    caseId: int