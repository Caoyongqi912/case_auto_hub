#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/21# @Author : cyq# @File : uiCase# @Software: PyCharm# @Desc:import enumfrom typing import List, Mapping, Anyfrom pydantic import BaseModel, Field, validatorfrom app.schema import PageSchemafrom enums.CaseEnum import CaseStatus, CaseLevelfrom utils import GenerateToolsclass AddUICaseBaseSchema(BaseModel):    title: str    description: str    level: str = Field(..., title="用例等级")    status: str = Field(..., title="用例状态")    env_id: str    step_num: int = 0    case_part_id: int    project_id: int    @validator('level')    def level_must_be_valid(cls, v):        if v is not None:            try:                return CaseLevel[v].value            except KeyError:                raise ValueError(f"Invalid level: {v}")        return v    @validator('status')    def status_must_be_valid(cls, v):        if v is not None:            try:                return CaseStatus[v].value            except KeyError:                raise ValueError(f"Invalid status: {v}")        return vclass EditUICaseBaseSchema(BaseModel):    id: int    title: str | None    description: str | None    level: str | None    status: str | None    env_id: str | None    case_part_id: int | None    project_id: int | Noneclass OPTUICaseBaseSchema(BaseModel):    caseId: intclass AddUICaseStepSql(BaseModel):    sql_str: str    step_id: int    b_or_a: int    description: str | None    creator: int | Noneclass UpdateUICaseStepSql(BaseModel):    uid: str    sql_str: str | None    step_id: int | None    b_or_a: int | None    description: str | None    creator: int | Noneclass AddUICaseStepApi(BaseModel):    b_or_a: int    name: str    description: str | None    url: str    method: str    stepId: int    go_on: int = 1    extracts: List[Mapping[str, Any] | None] | None    params: List[Mapping[str, Any] | None] | None    asserts: List[Mapping[str, Any] | None] | None    body: Mapping[str, Any] | None    body_type: int = 0    creator: int | Noneclass DeleteUICaseStepApi(BaseModel):    uid: strclass UpdateUICaseStepApi(BaseModel):    uid: str    b_or_a: int | None    go_on: int | None    name: str | None    description: str | None    url: str | None    method: str | None    stepId: int | None    extracts: List[Mapping[str, Any] | None] | None    params: List[Mapping[str, Any] | None] | None    asserts: List[Mapping[str, Any] | None] | None    body: Mapping[str, Any] | None    body_type: int | None    creator: int | Noneclass DateTimeField(enum.Enum):    DAY = "day"    WEEK = "week"    MONTH = "month"    YEAR = "year"class UICaseField(BaseModel):    id: int | None    title: str | None    uid: str | None    casePartId: int | None    projectId: int | None    creator: int | None    creatorName: str | None    status: CaseStatus | None    level: CaseLevel | None    env_id: str | None    env_name: str | Noneclass UISearchByDate(BaseModel):    projectId: int    st: str | None = GenerateTools.getMonthFirst(),    et: str | None = GenerateTools.getTime(2)class GetOrDeleteUICaeVariable(BaseModel):    uid: strclass InsertUICaseVariable(BaseModel):    key: str    value: str    caseId: int    creator: intclass UpdateUICaseVariable(BaseModel):    uid: str    key: str | None    value: str | None    updater: int | Noneclass UICasePage(PageSchema, UICaseField):    sort: dict | Noneclass UIVariablesPage(PageSchema):    caseId: intclass RunUITaskByJK(BaseModel):    taskIds: List[int]    userId: int    jobName: str | None = Noneclass AddUICaseStepWithGroup(BaseModel):    caseId: int    groupIds: List[int]