#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/8/8# @Author : cyq# @File : execFunc# @Software: PyCharm# @Desc:import asyncioimport timefrom datetime import datetime, timedeltafrom faker import Fakerclass ExecFuncManager:    faker = Faker(locale="zh_CN")    def __init__(self, funcStr: str, varName: str):        self.func = f"{varName} = {funcStr}"        self.varName = varName        self.local_vars = {            "timestamp": self._timeStamp,            'date': self.calculate_date,            "month": self.month,            "faker": self.faker        }    def execFunc(self):        try:            # Create a local scope for exec            exec(self.func, self.local_vars)        except Exception as e:            raise e        for variable_name, variable_value in self.local_vars.items():            if variable_name == self.varName:                obj = {variable_name: variable_value}                return obj    @staticmethod    def _timeStamp(t: str = None):        """        返回对应时间戳        ：param t +1s 秒  +1m 分 +1h分钟        """        if t is None:            return int(time.time() * 1000)        ts = int(t[1:-1])        unit = t[-1]        if t.startswith("+"):            match unit:                case "s":                    return (int(time.time()) + int(ts)) * 1000                case "m":                    return (int((datetime.now() + timedelta(minutes=int(ts))).timestamp())) * 1000                case "h":                    return (int((datetime.now() + timedelta(hours=int(ts))).timestamp())) * 1000        elif t.startswith("-"):            match unit:                case "s":                    return (int(time.time()) - int(ts)) * 1000                case "m":                    return (int((datetime.now() - timedelta(minutes=int(ts))).timestamp())) * 1000                case "h":                    return (int((datetime.now() - timedelta(hours=int(ts))).timestamp())) * 1000        else:            return None    @staticmethod    def month(day=1):        today = datetime.today()        y = today.year        m = today.month        return f"{y}-{m:02d}-{day:02d}"    @staticmethod    def calculate_date(t: str = None) -> str | None:        current_date = datetime.today().strftime("%Y-%m-%d")        if not t:            return current_date        ts = int(t[1:-1])        if t.startswith("+"):            delta = {"d": timedelta(days=ts),                     "m": timedelta(weeks=ts * 4),                     "y": timedelta(days=ts * 365)}            return (datetime.today() + delta[t[-1]]).strftime("%Y-%m-%d")        elif t.startswith("-"):            delta = {"d": timedelta(days=ts),                     "m": timedelta(weeks=ts * 4),                     "y": timedelta(days=ts * 365)}            return (datetime.today() - delta[t[-1]]).strftime("%Y-%m-%d")        else:            return Nonedef execFunc():    fs = "date('-40d')"    # fs = "'-'.join(date('-30d').split('-')[:2])"    # fs = "faker.random_int(min=1000, max=9999)"    var = "b"    ex = ExecFuncManager(fs, var)    data = ex.execFunc()    print(data)if __name__ == '__main__':    execFunc()    asyncio.run()