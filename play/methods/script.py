#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/2/6# @Author : cyq# @File : script# @Software: PyCharm# @Desc:import asynciofrom playwright.async_api import async_playwright, Playwright, Page, expectasync def run(playwright: Playwright):    chromium = playwright.chromium  # or "firefox" or "webkit".    browser = await chromium.launch(timeout=2000)    page = await browser.new_page()    await page.goto("https://www.baidu.com")    # other actions...    text = await page.locator("#su3").get_attribute("value")    print(text)    expect.set_options(2000)    text = await page.locator("#s-top-left > a:nth-child(1)").text_content()    await  expect(page.locator("#s-top-left > a:nth-child(1)")).to_contain_text("新闻")    await  expect(page.locator("#s-top-left > a:nth-child(1)")).to_have_text("新闻")    await  expect(page.locator("#s-top-left > a:nth-child(1)")).to_be_attached(attached=True)  # 是否已加载    await  expect(page.locator("#su")).to_be_empty()  # 是否已加载    # await  expect(page.locator("#s-top-left > a:nth-child(1)")).not_to_be_attached(attached=False)    await expect(page).to_have_title("百度一下，你就知道")    await expect(page).to_have_url("https://www.baidu.com/")    url = page.url    title = await page.title()    print(url, title)    await  expect(page.locator("#s-top-left")).to_have_id("s-top-left")    await  expect(page.locator("#s-top-left > a:nth-child(1)")).to_have_attribute(        name="href",        value="http://news.baidu.com",    )    print(text.strip())    await browser.close()async def main():    try:        async with async_playwright() as playwright:            await run(playwright)    except Exception as e:        print(type(e))        raise emap_locator = {    "to_have_attribute": "get_attribute()",  # 获取属性    "to_have_text": "inner_text()",  # 获取文本    "to_be_attached": "True",  # 是否已加载    "to_have_title": "page.title()",  # 获取title    "to_have_url": "page.url",  # 获取url}async def methods(page: Page):    attr = await page.locator("xx").get_attribute("xx")    expect(page.locator("xx")).to_have_attribute("xx")    text = (await page.locator("xx").text_content()).strip()    expect(page.locator("xx")).to_have_text("xx")    expect(page.locator("xx")).to_contain_text("xx")asyncio.run(main())