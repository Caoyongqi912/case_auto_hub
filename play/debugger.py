#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/7/4# @Author : cyq# @File : debugger# @Software: PyCharm# @Desc:import asynciofrom playwright.async_api import Playwright, async_playwright, Page, PageAssertionsfrom play.browser_content import get_browser_context, BrowserContextSingletonfrom utils import GenerateTools, logasync def run(playwright: Playwright, id: int):    chromium = playwright.chromium  # or "firefox" or "webkit".    browser = await chromium.launch(headless=True, slow_mo=1000)    context = await browser.new_context()    page = await context.new_page()    await page.goto("https://xx",                    wait_until="commit")    await page.fill("#username", "123")    await page.fill("#password", "123123")    await page.click("#btn-submit")    await page.wait_for_load_state()    cookies = await context.cookies()    for c in cookies:        print(c)        if c["name"] == "sid":            log.debug(c)    await page.wait_for_timeout(10000)    await browser.close()async def http_req():    from utils.httpxClient import HttpxClient    http = HttpxClient()    data = await http(method="post",                      headers={"Cookie": "sid=67228715-dd51-4f4f-89b8-4daad9ec9f28"},                      json={"contractStatus": 2, "beginCrtDttm": "2024-09-01", "currentpagesize": 10,                            "currentPageSize": 10, "pageSize": 10, "pagesize": 10, "currentpageindex": 1,                            "currentPageIndex": 1, "pageIndex": 1, "pageindex": 1, "currPage": 1, "pageNum": 1},                      url="https://123")    log.debug(data.text)async def main():    async with async_playwright(    ) as playwright:        await run(playwright, 1)async def parallel_main():    tasks = []    num_tasks = 1  # Number of parallel tasks to run    async with async_playwright() as playwright:        for _ in range(num_tasks):            tasks.append(run(playwright, id=_))        await asyncio.gather(*tasks)async def run():    browser_context = await get_browser_context()    page = await browser_context.get_page()    await page.goto("/")    await page.screenshot(path="baidu.png")    await browser_context.close_page(page)    await browser_context.shutdown()    await asyncio.sleep(1)async def user_task(user_id: int, browser_context: BrowserContextSingleton):    page = await browser_context.get_page()    try:        await page.goto(f"https://www.baidu.com")        await page.screenshot(path=f"example_{user_id}.png")        log.info(f"User {user_id} completed task")    except Exception as e:        log.error(f"User {user_id} encountered an error: {e}")    finally:        await browser_context.close_page(page)async def main1():    browser_context = await get_browser_context()    # await asyncio.gather(*tasks)    asyncio.create_task(user_task(1, browser_context))    await browser_context.shutdown()import asynciofrom playwright.async_api import async_playwright, Playwrightasync def run2(playwright: Playwright):    chromium = playwright.chromium # or "firefox" or "webkit".    browser = await chromium.launch()    page = await browser.new_page()    await page.goto("https://www.baidu.com")    title = await page.title()    print(title)    # other actions...    await browser.close()async def main3():    async with async_playwright() as playwright:        await run2(playwright)if __name__ == '__main__':    # Run main() function sequentially    # asyncio.run(main())    # Run parallel_main() to run multiple tasks in parallel    # asyncio.run(main())    asyncio.run(main3())    # asyncio.run(http_req())    # 获取 CustomizeMethod 类中的所有静态方法名称