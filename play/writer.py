#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/9# @Author : cyq# @File : writer# @Software: PyCharm# @Desc:import datetimefrom typing import Dict, Anyfrom app.mapper.ui.uiCaseResultMapper import UICaseResultMapper, UICaseTaskResultBaseMapperfrom app.mapper.ui.uiTaskMapper import UITaskMapperfrom app.mapper.user import UserMapperfrom app.mapper.file import FileMapperfrom app.model.base import FileModelfrom app.model.ui import UIResultModel, UICaseModel, UITaskModel, UICaseTaskResultBaseModelfrom utils import logfrom enums.CaseEnum import Result, Statusfrom config import Configfrom utils import GenerateToolsimport osfrom play.logWriter import LogWriterclass Writer:    """    执行db记录    """    @staticmethod    async def write_task_status(task: UITaskModel, status: Status):        """        修改task状态        :param task:        :param status:        :return:        """        await UITaskMapper.set_task_status(task.id, status)    @staticmethod    async def init_task_base_result(totalNumber: int, task: UITaskModel,                                    userId: int = None) -> UICaseTaskResultBaseModel:        """        初始化 task执行结果        :param totalNumber 待执行用例数量        :param task: UITaskModel        :param userId: 执行人ID        :return:        """        if userId:            user = await UserMapper.get_by_id(userId)        else:            user = None        result = await UICaseTaskResultBaseMapper.init_task_base_result_model(            totalNumber,            task,            user,        )        log.info(f'init task base result: {result}')        return result    @staticmethod    async def init_case_result(case: UICaseModel,                               userId: int = None,                               baseId: int = None) -> UIResultModel:        """        初始化 用例执行结果        :param case:  用例模型        :param userId:  执行人ID        :param baseId: 批量结果Base        :return: UIResultModel        """        if userId:            user = await UserMapper.get_by_id(userId)        else:            user = None        result = await UICaseResultMapper.init_case_result_model(case, user, baseId)        return result    @staticmethod    async def write_base_result(base_result: UICaseTaskResultBaseModel):        """        回写测试结果        :param base_result: 测试结果实体        :return:        """        eTime = datetime.datetime.now()        base_result.rateNumber = round(base_result.successNumber / base_result.totalNumber * 100, 2)        base_result.end_time = eTime        base_result.totalUseTime = GenerateTools.timeDiff(base_result.start_time, eTime)        base_result.status = Status.DONE        if base_result.failNumber > 0:            base_result.result = Result.FAIL        else:            base_result.result = Result.SUCCESS        return await UICaseTaskResultBaseMapper.set_base_result(base_result)    @staticmethod    async def write_case_result(case_result: UIResultModel,                                logger: LogWriter,                                errorMsgMap: Dict[str, str] = None):        """        回写测试结果        :param case_result: 测试结果实体        :param logger: logger 对象        :param errorMsgMap: 错误信息        :return:        """        PATH_KEY = "ui_case_err_step_pic_path"        eTime = datetime.datetime.now()        case_result.endTime = eTime        case_result.useTime = GenerateTools.timeDiff(case_result.startTime, eTime)        case_result.result = Result.SUCCESS        case_result.status = Status.DONE        case_result.runningLogs = "".join(logger.logs)        if errorMsgMap:            log.info(f"error_msg = {errorMsgMap}")            case_result.result = Result.FAIL            if errorMsgMap.get(PATH_KEY):                file = await Writer.write_error_file(errorMsgMap.get(PATH_KEY))                errorMsgMap[PATH_KEY] = f"{Config.UI_ERROR_PATH}{file.uid}"            for k, v in errorMsgMap.items():                setattr(case_result, k, v)        await UICaseResultMapper.set_case_result(case_result)    @staticmethod    async def write_error_file(filepath: str) -> FileModel:        """        db 写入 file        :param filepath:        :return:        """        fileName = os.path.split(filepath)[-1]        file = await FileMapper.insert_file(            filePath=filepath,            fileName=fileName        )        return file    @staticmethod    async def write_assert_info(case_result: UIResultModel,                                assertsInfo: Any = None):        """        写入assertInfo        :param case_result:        :param assertsInfo:        :return:        """        case_result.assertsInfo.extend(assertsInfo)        await UICaseResultMapper.set_case_result_assertInfo(case_result.id, case_result.assertsInfo)