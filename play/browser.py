#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/3/31# @Author : cyq# @File : browser# @Software: PyCharm# @Desc:import asynciofrom playwright.async_api import async_playwrightfrom config import Configfrom utils import logclass BrowserManager:    _playwright = None    _browser = None    _lock = asyncio.Lock()    @classmethod    async def get_browser(cls):        if cls._browser is None:            async with cls._lock:                if cls._browser is None:                    try:                        # 确保 Playwright 和 Browser 的初始化一致                        if cls._playwright is None:                            cls._playwright = await async_playwright().start()                        cls._browser = await cls._playwright.chromium.launch(                            headless=Config.UI_Headless,                            timeout=Config.UI_Timeout,                            slow_mo=Config.UI_SLOW                        )                        log.info("BrowserContext initialized")                    except Exception as e:                        # 异常处理：释放资源并记录日志                        log.error(f"Failed to initialize browser: {e}")                        if cls._playwright is not None:                            try:                                await cls._playwright.stop()                            except Exception as cleanup_error:                                log.error(f"Error during cleanup: {cleanup_error}")                            finally:                                cls._playwright = None                        cls._browser = None                        raise  # 将异常重新抛出以便调用方处理        return cls._browser    @classmethod    async def shutdown(cls):        try:            if cls._browser:                await cls._browser.close()            if cls._playwright:                await cls._playwright.stop()        except Exception as e:            log.error(f"Error closing context: {e}")        try:            await cls._browser.close()        except Exception as e:            log.error(f"Error closing browser: {e}")        try:            await cls._playwright.stop()        except Exception as e:            log.error(f"Error stopping playwright: {e}")        log.info("BrowserContext shutdown")async def get_browser_context():    """每个用例获取独立的 BrowserContext（隔离环境）"""    browser = await BrowserManager.get_browser()    context = await browser.new_context()    context.set_default_timeout(Config.UI_Timeout)    return context