#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/12/4# @Author : cyq# @File : _script# @Software: PyCharm# @Desc:import asynciofrom app.mapper.interface import InterfaceScriptMapperscs = [    dict(        title="timestamp(day:str = None)-> str 获取时间戳",        subTitle="Func",        args=str(["+1s", "-1s", "+1m", "-1m", "+1h", "-1h"]),        desc='获取不同时间的时间戳',        example="ts=timestamp();",        returnContent=':return 1705114614000'    ),    {        "title": "date(day:str = None) -> str 获取日期",        "subTitle": "Func",        "args": "['+1d', '-1d', '+1m', '-1m', '+1y', '-1y']",        "desc": "获取 YYYY-MM-DD 格式时间",        "example": "currentDay = date()",        "returnContent": ':return 2024-01-13'    },    {        "title": "execute_sql(db:str,sql:str) -> NoReturn: sql执行",        "subTitle": "Func",        "args": "",        "desc": "执行sql 当查询 select a form x where id = 1';\n a会转换成变量Key",        "example": "execute_sql(db='db_name',sql='insert ...');",        "returnContent": ':return Any'    },    {        "title": "log(message:str) -> NoReturn: 打印日志",        "subTitle": "Func",        "args": "",        "desc": "日志输出",        "example": "execute_sql(db='db_name',sql='insert ...');",        "returnContent": ':no return'    },    {        "title": 'response 响应体',        "subTitle": 'Http Response Object',        "example": 'text = response.text , jsonBody = response.json()',        "desc": '当前步骤返回响应体对象 用于后置操作',        "returnContent": ':return Any',    },    {        "title": 'faker 生成伪数据',        "subTitle": 'Faker Object',        "example": 'name = faker.name()',        "desc": '当前步骤返回响应体对象 用于后置操作',        "returnContent": ':return Any',    },]async def insertScript():    for sc in scs[1:]:        # sc = dict(        #     title="timestamp(day:str = None)-> str 获取时间戳",        #     subTitle="Func",        #     args=str(["+1s", "-1s", "+1m", "-1m", "+1h", "-1h"]),        #     desc='获取不同时间的时间戳',        #     example="",        #     returnContent=':return 1705114614000'        # )        await InterfaceScriptMapper.insert(**sc)if __name__ == '__main__':    asyncio.run(insertScript())