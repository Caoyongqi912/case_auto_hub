#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/7/31# @Author : cyq# @File : debugger# @Software: PyCharm# @Desc:import asynciofrom typing import List, Dict, Anyimport configfrom app.mapper.ui.uiCaseVariableMapper import UICaseVariableMapperfrom enums.CaseEnum import CaseLevel, CaseStatusfrom model.ui import UICaseModel, UICaseStepsModel, case_step_Tablefrom app.mapper.ui.uiCaseMapper import UICaseMapper, UICaseStepMapper, UICaseStepApiMapper, UICaseStepSQLMapper"""南京 8,15db3636杭州 9,9948c70d,2024-08-22 09:37:21,北京 10,e9d9aea7,2024-08-22 16:49:14,天津,11,27e8afa7,2024-08-23 14:00:17,上海 12,224580ae"""async def case_copy():    # cases: List[UICaseModel] = await UICaseMapper.query_by(    #     **{"casePartId": 73})    # print(len(cases))    cases = []    caseUids = []    for caseUid in caseUids:        case = await UICaseMapper.get_by_uid(uid=caseUid)        cases.append(case)    for case in cases:        new_case = await pop(case.map)        new_case['envId'] = "123"        new_case['envName'] = "123"        # new_case['username'] = case.username        new_case['username'] = "123"        new_case['level'] = CaseLevel.getValue(new_case['level'])        new_case['status'] = CaseStatus.getValue(new_case['status'])        new_case['casePartId'] = 69        new_case_model = await UICaseMapper.save(**new_case)        await copy_var(case, new_case_model.id)        await case_step_copy(case.id, new_case_model.id)        print(f"caseID:{case.id} 完成复制 -》{new_case_model.uid}")async def copy_var(old_case, new_case_id):    vars = await UICaseVariableMapper.query_by(caseId=old_case.id)    for var in vars:        copyVar = await pop(var.map)        copyVar['caseId'] = new_case_id        await UICaseVariableMapper.save(**copyVar)async def copy_step_api(old_step, new_step_id: int):    old_api = await UICaseStepApiMapper.get_by(stepId=old_step.id)    copy_api = await pop(old_api.map)    copy_api['stepId'] = new_step_id    await UICaseStepApiMapper.save(**copy_api)async def copy_step_sql(old_step, new_step_id: int):    old_sql = await UICaseStepSQLMapper.get_by(stepId=old_step.id)    copy_sql = await pop(old_sql.map)    copy_sql['stepId'] = new_step_id    await UICaseStepApiMapper.save(**copy_sql)async def case_step_copy(old_caseId: int, new_caseId: int):    steps = await UICaseMapper.query_steps_by_caseId(old_caseId)    for i, step in enumerate(steps, start=1):        if step.isCommonStep:            new_step = step        else:            copy_step = await pop(step.map)            new_step = await UICaseStepMapper.save(**copy_step)        if step.has_api:            await copy_step_api(step, new_step.id)        if step.has_sql:            await copy_step_sql(step, new_step.id)        await UICaseStepMapper.insert_association(new_caseId,                                                  new_step.id,                                                  i)async def pop(map: Dict[str, Any]) -> Dict[str, Any]:    """    复制删除相关数据    """    map.pop("create_time", None)    map.pop("update_time", None)    map.pop("casePartId", None)    # map.pop("creatorName", None)    # map.pop("creator", None)    map.pop("updaterName", None)    map.pop("updater", None)    map.pop("id", None)    map.pop("envName", None)    map.pop("uid", None)    # for var    map.pop("caseId", None)    return mapdef test():    import jenkins    j = jenkins.Jenkins(config.Config.JENKINS_URL,                        config.Config.JENKINS_USERNAME,                        config.Config.JENKINS_PASSWORD)    j.build_job('xx')def get_username(name: str):    name = name.split("0")    if len(name) == 1:        return name[0]    username = name[0]    num = int(name[1])    return f"{username}0{num + 1}"if __name__ == '__main__':    a = "cyq01"    print(get_username(a))