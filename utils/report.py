#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/7/3# @Author : cyq# @File : report2# @Software: PyCharm# @Desc:from app.model.ui import UITaskModel, UICaseTaskResultBaseModelfrom utils.httpxClient import HttpxClientfrom config import Configclass Report:    """    send msg to [weChat,]    """    weChatBaseUrl = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send"    def __init__(self):        self.sender = HttpxClient()    async def ui2weChatErrBeat(self, taskModel, errorBeats: list):        """        ui 谈活失败        :return:        """        result = [f"<font color=\"warning\">{i}</font>" for i in errorBeats]        _template = f"""                  ## UI自动化任务: <font>{taskModel.title} </font> 探活失败                  {result}                  """        return await self.__wechat_send(content=_template, key=taskModel.sendKey)    async def ui2weChat(self, taskModel: UITaskModel, baseModel: UICaseTaskResultBaseModel):        """        :param taskModel:        :param baseModel:        :return:        """        if baseModel.failNumber == 0:            result = "**结果**：<font color=\"info\">✅ 通过</font> [点我查看详情]"        else:            result = f"**结果**：<font color=\"warning\">❌ 异常</font> [点我查看详情]"        result += f"({Config.UI_REPORT_URL}{baseModel.uid})"        _template = f"""                  ## UI自动化任务: <font> [{taskModel.title}]({Config.UI_TASK_URL + taskModel.uid}) </font> 测试完成                  > 执行人: {baseModel.starterName}                  > 执行用时：{baseModel.totalUseTime}                  > 执行用例数量：{baseModel.totalNumber}                  > 成功：{baseModel.successNumber}                  > 失败：{baseModel.failNumber}                  > {result}                  """        return await self.__wechat_send(content=_template, key=taskModel.sendKey)    async def jacoco2weChat(self):        ...    async def api2weChat(self):        ...    async def __wechat_send(self, content: str, key: str, **kwargs):        _ = {            "msgtype": "markdown",            "markdown": {                "content": content            }        }        response = await self.sender(url=self.weChatBaseUrl,                                     method="post",                                     params={"key": key},                                     json=_,                                     headers={"Content-Type": "application/json"},                                     **kwargs)