#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/2/27# @Author : cyq# @File : curlTrans# @Software: PyCharm# @Desc:import refrom utils import GenerateToolsfrom urllib.parse import urlparse, parse_qsclass CurlConverter:    def __init__(self, curl_command):        self.curl_command = curl_command    def parse_curl(self):        # 默认方法为 GET        body_type = 0        curl_pattern = re.compile(            r"curl\s+"            r"(?:-X\s+(?P<method>\w+)\s+)?"  # 匹配方法（可选）            r"['\"]?(?P<url>https?://[^ '\"]+)"  # 匹配 URL        )        match = curl_pattern.search(self.curl_command)        # 提取 URL 和方法        url = match.group("url")        method = match.group("method") or "GET"  # 默认方法为 GET        parsed_url = urlparse(url)        url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"        query_params = parse_qs(parsed_url.query)        params = [            {"key": k, "value": v[0], "id": GenerateTools.uid()}            for k, v in query_params.items()        ]        headers = [            {"key": key, "value": value, "id": GenerateTools.uid()}            for key, value in re.findall(r"-H ['\"]([^:]+): ([^'\"]+)['\"]", self.curl_command)        ]        # cookie        # 处理 -b 参数（cookie）        cookie_match = re.search(r"-b ['\"]([^'\"]+)['\"]", self.curl_command)        if cookie_match:            cookies = cookie_match.group(1)            # 如果找到 cookie, 将其加入 headers 中作为 Cookie header            headers.append({                "key": "Cookie",                "value": cookies,                "id": GenerateTools.uid()            })        body_type, body, data = self.extract_body()        return {            "url": url,            "params": params,            "method": method,            "headers": headers,            "body": body,            "data": data,            "body_type": body_type        }    def extract_body(self):        body_type = 0        body = None        data = []        if "--data-raw" in self.curl_command:            body_type = 1            try:                body = re.findall(r"--data-raw ['\"]([^'\"]+)['\"]", self.curl_command)[0]            except IndexError:                body = None        elif "--data" in self.curl_command:            body_type = 1            try:                body = re.findall(r"--data ['\"]([^'\"]+)['\"]", self.curl_command)[0]            except IndexError:                body = None        elif re.search(r"\s-d\s+['\"][^'\"]+['\"]", self.curl_command):            body_type = 2            try:                _data = re.findall(r"-d ['\"]([^'\"]+)['\"]", self.curl_command)                for _ in _data:                    try:                        k, v = _.split("=", 1)                        data.append({"key": k, "value": v, "id": GenerateTools.uid()})                    except ValueError:                        pass  # 忽略格式不正确的数据            except IndexError:                pass        return body_type, body, data