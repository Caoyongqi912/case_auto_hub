#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/2/27# @Author : cyq# @File : curlTrans# @Software: PyCharm# @Desc:import jsonimport refrom utils import GenerateToolsfrom urllib.parse import urlparse, parse_qsclass CurlConverter:    def __init__(self, curl_command):        self.curl_command = curl_command    def parse_curl(self):        # 默认方法为 GET        method = "GET"        # 默认 0        body_type = 0        curl_pattern = re.compile(            r"curl\s+"            r"(?:-X\s+(?P<method>\w+)\s+)?"  # 匹配方法（可选）            r"['\"]?(?P<url>https?://[^ '\"]+)"  # 匹配 URL        )        match = curl_pattern.search(self.curl_command)        # 提取 URL 和方法        url = match.group("url")        if match.group("method"):            method = match.group("method")        else:            # 如果没有指定方法，但有 --data 或 --data-raw，则默认为 POST            if "--data" in self.curl_command or "--data-raw" in self.curl_command:                method = "POST"        parsed_url = urlparse(url)        url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"        query_params = parse_qs(parsed_url.query)        params = [            {"key": k, "value": v[0], "id": GenerateTools.uid()}            for k, v in query_params.items()        ]        headers = [            {"key": key, "value": value, "id": GenerateTools.uid()}            for key, value in re.findall(r"-H ['\"]([^:]+): ([^'\"]+)['\"]", self.curl_command)        ]        # cookie        # 处理 -b 参数（cookie）        cookie_match = re.search(r"-b ['\"]([^'\"]+)['\"]", self.curl_command)        if cookie_match:            cookies = cookie_match.group(1)            # 如果找到 cookie, 将其加入 headers 中作为 Cookie header            headers.append({                "key": "Cookie",                "value": cookies,                "id": GenerateTools.uid()            })        body_type, body, data = self.extract_body()        return {            "url": url,            "params": params,            "method": method,            "headers": headers,            "body": body,            "data": data,            "body_type": body_type        }    def extract_body(self):        body_type = 0        body = None        data = []        # 使用更灵活的正则表达式来匹配 --data-raw 和 --data 参数        data_raw_match = re.search(r"--data-raw\s+(['\"])(.*?)\1", self.curl_command)        data_match = re.search(r"--data\s+(['\"])(.*?)\1", self.curl_command)        d_match = re.search(r"-d\s+(['\"])(.*?)\1", self.curl_command)        if data_raw_match:            body_type = 1            body = data_raw_match.group(2)        elif data_match:            body_type = 1            body = data_match.group(2)        elif d_match:            body_type = 2            _data = d_match.group(2).split("&")            for _ in _data:                try:                    k, v = _.split("=", 1)                    data.append({"key": k, "value": v, "id": GenerateTools.uid()})                except ValueError:                    pass  # 忽略格式不正确的数据        try:            body = json.loads(body)        except json.JSONDecodeError:            pass        return body_type, body, data