#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/3/14# @Author : cyq# @File : locustUser# @Software: PyCharm# @Desc:import jsonimport locustfrom locust import HttpUser, task, FastHttpUser, betweenfrom app.schema.interface import InterfaceApiSchema, PerfSchemadef create_dynamic_user_class(apiInfo: InterfaceApiSchema, perfSetting: PerfSchema):    """    动态创建 User 类，根据传入的 API 配置生成对应的测试方法    参数:    - apiInfo: API Info    - perfSetting: Perf信息    """    class DynamicApiUser(FastHttpUser):        # 等待时间        wait_time = between(*perfSetting.wait_range)        def on_start(self) -> None:            # todo 初始化变量            ...        @task        def dynamic_task(self):            """动态生成的任务方法"""            with getattr(self.client, apiInfo.method.lower())(                    apiInfo.url,                    name=f"{apiInfo.method} {apiInfo.url}",  # 用于统计                    catch_response=True,                    **apiInfo.requestInfo            ) as response:                self.process_response(response, apiInfo)        @staticmethod        def process_response(response, apiInfo: InterfaceApiSchema):            """处理响应，可被重写"""            pass    return DynamicApiUserclass DebuggerUser(HttpUser):    method: str = "GET"    url: str = ""    def on_start(self) -> None:        print("im start")    @task    def invoke(self):        with getattr(self.client, self.method)(self.url, **self.api_info, catch_response=True) as response:            passif __name__ == '__main__':    locust.run_single_user(DebuggerUser)