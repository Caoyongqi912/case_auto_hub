#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/8/12# @Author : cyq# @File : transform# @Software: PyCharm# @Desc:from typing import Any, Dict, Listimport refrom common.fakerClient import FakerClientclass Transform:    def __init__(self, variables: dict):        self.variables = variables    async def transform_target(self, target: Any):        """        参数转换        数据转换        """        # 如果单纯字符串        if isinstance(target, str):            return await self._transformStr(target)        # 如果是字典        if isinstance(target, dict):            return await self._transFormObj(target)        # 如果是列表        if isinstance(target, list):            return await self._transFormList(target)        return target    async def _transformStr(self, target: str) -> str:        """        字符串替换        """        if target.startswith("{{") and target.endswith("}}"):            # todo            # 处理 {{$xx}} 格式变量            extractKey = target[2:-2]            if extractKey.startswith("$"):                extractKey = extractKey[1:]                f = FakerClient()                return f.value(extractKey)            return self.variables.get(extractKey, target)        else:            pattern = r"{{(.*?)}}"            return re.sub(pattern, lambda match: str(self.variables.get(match.group(1), match.group(0))), target)    async def _transFormObj(self, target: Dict[str, Any]) -> Dict[str, Any]:        """        字典替换        :param target        """        return {key: await self.transform_target(value) for key, value in target.items()}    async def _transFormList(self, target: List[Any]) -> List[Any]:        """        列表替换        """        return [await self.transform_target(item) for item in target]def demo():    import asyncio    data = {'name': '{{name}}', 'method': 'post', 'url': '/nhapigw/ys-api/app/projectNew/projectList',            'host': 'https://sit-beijing-nhcbs.5i5j.com',            'headers': {'Accept': '*/*', 'User-Agent': 'case_Hub_http/v0.1',                        'Authorization': 'eyJhbGciOiJSUzUxMiJ9.eyJqb2JJZCI6IjgxOCIsImNvbXBJZCI6IjEiLCJjaXR5Q29kZSI6IjExMDEwMCIsInR5cGUiOiJBUFAiLCJ1c2VySWQiOiIxNTA3NyIsIm9yZ0lkIjoiMTE4IiwidXNlcm5hbWUiOiIxNTA3NyIsInRva2VuIjoiOGNlZjNlNDUxNzc4NGYwMTlkOTM3YTMxODE5ZDJkM2EifQ.DRaqhqIIvIxX9mv2TdXKnhr3LneygkAxJHT_XJCTt-FN93LrSq7Qwth5QzTodQdIgqmxUxl9tUuIk_C1NHTNUM0yEvlIRgBwxrS_M9_xBne342wtKA904-U7MauY6Ny-2-dhiW52SlgAqVrls5bgfTwCN1CL2ejTW4PEAygXjdQ',                        'Content-Type': 'application/json'}, 'data': None,            'body': {'page': 1, 'areaId': '', 'status': 'SPECIALLIST', 'pageSize': 10, 'isRenewal': '',                     'isFocusing': None,                     'statusName': None, 'bizCityCode': '', 'projectCode': None, 'districtCode': '',                     'invokeSource': 'PC',                     'loopLineType': None, 'propertyType': None, 'provinceCode': '', 'regionalType': None,                     'assistantName': None, 'createEndDate': '', 'isConfirmLook': None, 'createStartDate': '',                     'projectLocation': None}, 'params': None}    transform = Transform([{"name": "111"},{"name":"xxx"}])    v = asyncio.run(transform.transform_target(data))    print(v)if __name__ == '__main__':    demo()