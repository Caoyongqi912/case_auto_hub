#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/8/12# @Author : cyq# @File : transform# @Software: PyCharm# @Desc:from typing import Any, Dict, Listimport refrom utils.fakerClient import FakerClientclass Transform:    def __init__(self, variables: dict):        self.variables = variables    async def transform_target(self, target: Any):        """        参数转换        数据转换        """        # 如果单纯字符串        if isinstance(target, str):            return await self._transformStr(target)        # 如果是字典        if isinstance(target, dict):            return await self._transFormObj(target)        # 如果是列表        if isinstance(target, list):            return await self._transFormList(target)    async def _transformStr(self, target: str) -> str:        """        字符串替换        """        if target.startswith("{{") and target.endswith("}}"):            # todo            # 处理 {{$xx}} 格式变量            extractKey = target[2:-2]            if extractKey.startswith("$"):                extractKey = extractKey[1:]                f = FakerClient()                return f.value(extractKey)            return self.variables.get(extractKey, target)        else:            pattern = r"{{(.*?)}}"            return re.sub(pattern, lambda match: str(self.variables.get(match.group(1), match.group(0))), target)    async def _transFormObj(self, target: Dict[str, Any]) -> Dict[str, Any]:        """        字典替换        :param target        """        return {key: await self.transform_target(value) for key, value in target.items()}    async def _transFormList(self, target: List[Any]) -> List[Any]:        """        列表替换        """        return [await self.transform_target(item) for item in target]