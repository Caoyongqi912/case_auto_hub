#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/14# @Author : cyq# @File : log_wrapper# @Software: PyCharm# @Desc:from redlock import RedLock, RedLockErrorimport asyncioimport functoolsfrom config import Configfrom utils import logimport osconnection_details = [{    "host": Config.REDIS_SERVER,    "port": Config.REDIS_PORT,    "db": Config.REDIS_DB,    # "password": Config.REDIS_PASSWORD}]def lock(key):    """    redis分布式锁，基于redlock    :param key: 唯一key，确保所有任务一致，但不与其他任务冲突    :return:    """    def decorator(func):        if asyncio.iscoroutinefunction(func):            @functools.wraps(func)            async def wrapper(*args, **kwargs):                log.debug(f"args[1] = {args[1]}")                try:                    with RedLock(f"distributed_lock:{func.__name__}:{key}{args[1]}",                                 connection_details=connection_details,                                 ttl=30000,  # 锁释放时间为30s                                 ):                        log.info(f"进程: {os.getpid()} 获取任务成功")                        return await func(*args, **kwargs)                except RedLockError:                    log.error(f"进程: {os.getpid()}获取任务失败, 其他任务执行中")        else:            @functools.wraps(func)            def wrapper(*args, **kwargs):                try:                    with RedLock(f"distributed_lock:{func.__name__}:{key}",                                 connection_details=connection_details,                                 ttl=30000,  # 锁释放时间为30s                                 ):                        return func(*args, **kwargs)                except RedLockError:                    log.error(f"进程: {os.getpid()}获取任务失败, 其他任务执行中")        return wrapper    return decorator