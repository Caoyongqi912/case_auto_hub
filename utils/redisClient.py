import asynciofrom typing import Mapping, Any, Dict, Listfrom redis.asyncio import Redisfrom config import Configfrom utils._myLoguru import MyLogurulog = MyLoguru().get_logger()class RedisClient:    r: Redis = None    async def init_pool(self):        self.r = Redis(host=Config.REDIS_SERVER,                       port=Config.REDIS_PORT,                       db=Config.REDIS_DB,                       decode_responses=True,                       max_connections=100)    @staticmethod    async def connect(db_host, db_port, db_username, db_password, db_database):        try:            r = Redis(                host=db_host,                port=db_port,                username=db_username,                password=db_password,                db=db_database,                decode_responses=True,                max_connections=100            )        except Exception as e:            from app.exception import CommonError            raise CommonError(f"redis连接失败:{e}")    async def close_pool(self):        if self.r:            await self.r.close()    async def set_pool(self, **kwargs):        log.debug(kwargs)        self.r = Redis(**kwargs)    async def check_key_exist(self, key: str) -> int:        return await self.r.exists(key)    async def h_set(self, name: str, value: Dict                                            [str, Any] | str):        return await self.r.hset(name=name, mapping=value)    async def h_get_all(self, key: str):        return await self.r.hgetall(key)    async def l_push(self, name: str, values: Any):        try:            return await self.r.lpush(name, values)        except Exception as e:            raise e    async def l_range(self, name: str):        return await self.r.lrange(name, 0, -1)    async def remove_key(self, key: str):        return await self.r.delete(key)    async def clear_all_record(self):        keys = await self.r.keys("record_*")        for key in keys:            await self.r.delete(key)    async def execute_script(self, script: str, ):        try:            return await self.r.execute_command(script)        except Exception as e:            log.error(e)            return Noneasync def main():    redis_client = RedisClient()    await redis_client.init_pool()    # await redis_client.h_set("te", {"name": "test", "age": 18})    await redis_client.execute_script("hget te name")if __name__ == '__main__':    asyncio.run(main())