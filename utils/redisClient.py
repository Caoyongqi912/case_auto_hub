import asyncioimport jsonfrom typing import Mapping, Any, Dict, Listfrom redis.asyncio import Redisfrom config import Configclass RedisClient:    r: Redis = None    async def init_pool(self):        self.r = Redis(host=Config.REDIS_SERVER,                       port=Config.REDIS_PORT,                       db=Config.REDIS_DB,                       decode_responses=True,                       max_connections=100)    async def check_key_exist(self, key: str) -> int:        return await self.r.exists(key)    async def h_set(self, name: str, value: Dict                                            [str, Any] | str):        return await self.r.hset(name=name, mapping=value)    async def h_get_all(self, key: str):        return await self.r.hgetall(key)    async def l_push(self, name: str, values: Any):        try:            return await self.r.lpush(name, values)        except Exception as e:            raise e    async def l_range(self, name: str):        return await self.r.lrange(name, 0, -1)    async def remove_key(self, key: str):        return await self.r.delete(key)    async def clear_all_record(self):        keys = await self.r.keys("record_*")        for key in keys:            await self.r.delete(key)