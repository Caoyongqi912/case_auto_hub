#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/2/27# @Author : cyq# @File : locustClient# @Software: PyCharm# @Desc:import asyncioimport timeimport geventfrom locust import HttpUser, task, between, FastHttpUserfrom locust.env import Environmentfrom locust.log import setup_loggingsetup_logging("INFO", None)class DynamicApiUser(HttpUser):    api_info = {}    method: str    url: str    def on_start(self):        self.api_info = self.environment.api_info        self.method = self.environment.method        self.host = self.environment.host        self.url = self.environment.url    @task    def invoke(self):        resp = getattr(self.client, self.method)(self.url, **self.api_info)        print(resp.text)def start_locust_test(api_info, users: int, spawn_rate: int, duration: str):    # 创建 Locust 环境    env = Environment(user_classes=[DynamicApiUser])    # 动态传递参数    env.method = api_info.pop("method")    env.url = api_info.pop("url")    env.host = api_info.pop("host")    env.api_info = api_info    runner = env.create_local_runner()    # 启动测试    runner.start(users, spawn_rate=spawn_rate)    # 设置测试时长    if duration:        from locust.util.timespan import parse_timespan        duration_seconds = parse_timespan(duration)        gevent.sleep(duration_seconds)  # 等待测试完成        runner.quit()    # 返回测试结果    return env.statsif __name__ == '__main__':    host = "https://sit-beijing.cbs.bacic5i5j.com"    res = start_locust_test({}, 5, 10, "10s")    if res:        print("\nTest Results:")        print(f"Total Requests: {res.total.num_requests}")        print(f"Failures: {res.total.num_failures}")        print(f"Average Response Time: {res.total.avg_response_time} ms")        print(f"max_response_time : {res.total.max_response_time} ms")        print(f"min_response_time : {res.total.min_response_time} ms")        print(f"total_rps : {res.total.total_rps} ms")