#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/2/18# @Author : cyq# @File : oracleClient# @Software: PyCharm# @Desc:import asyncioimport cx_Oraclefrom cx_Oracle import Connectionfrom config import Configfrom ._myLoguru import MyLogurulog = MyLoguru().get_logger()class OracleClient:    connection: Connection = None    cursor = None    async def connect(self, host: str, port: str | int, service_name: str, username: str, password: str):        loop = asyncio.get_event_loop()        self.connection = await loop.run_in_executor(None, self._connect_sync, host, port, service_name, username,                                                     password)        self.cursor = self.connection.cursor()    @staticmethod    def _connect_sync(host: str, port: str, service_name: str, username: str, password: str):        """同步连接数据库"""        dsn = cx_Oracle.makedsn(host, port, service_name=service_name)        #mac m2 需要指定client 位置        try:            cx_Oracle.init_oracle_client(lib_dir=Config.CX_Oracle_Client_Dir)        except Exception as e:            log.error(e)        return cx_Oracle.connect(user=username, password=password, dsn=dsn)    async def fetch_all(self, query, params=None):        """异步查询数据库"""        loop = asyncio.get_event_loop()        return await loop.run_in_executor(None, self._fetch_all_sync, query, params)    def _fetch_all_sync(self, query, params):        """同步执行查询"""        self.cursor.execute(query, params or [])        columns = [col[0] for col in self.cursor.description]        rows = self.cursor.fetchall()        return [dict(zip(columns, row)) for row in rows]    async def execute(self, query, params=None):        """异步执行插入/更新/删除操作"""        loop = asyncio.get_event_loop()        await loop.run_in_executor(None, self._execute_sync, query, params)    def _execute_sync(self, query, params):        """同步执行非查询操作"""        self.cursor.execute(query, params or [])        self.connection.commit()    async def close(self):        """关闭连接"""        loop = asyncio.get_event_loop()        await loop.run_in_executor(None, self._close_sync)    def _close_sync(self):        """同步关闭连接"""        if self.cursor:            self.cursor.close()        if self.connection:            self.connection.close()