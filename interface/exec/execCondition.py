#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/10/23# @Author : cyq# @File : execCondition# @Software: PyCharm# @Desc:from typing import Listfrom app.model.interface.InterfaceCaseStepContent import InterfaceConditionfrom utils.io_sender import SocketSenderfrom utils.variableTrans import VariableTransclass ExecCondition:    EQ = 1    NE = 2    IS_EMPTY = 3    NOT_EMPTY = 4    RT = 5    LT = 6    ASSERT_MAP = {        1: "相等",        2: "不相等",        3: "为空“",        4: "不为空",        5: "大于",        6: "小与"    }    key = None    value = None    operator = None    def __init__(self, variable: VariableTrans):        self.variable = variable    async def invoke(self, condition: InterfaceCondition, io: SocketSender):        self.key = await self.variable.trans(condition.condition_key)        self.value = await self.variable.trans(condition.condition_value)        self.operator = condition.condition_operator        await io.send(f"条件判断 >> key={self.key} & value={self.value}")        return await  ExecCondition._asserts(self.key, self.value, condition.condition_operator)    @staticmethod    async def _asserts(key: str, value: str, operator: int):        try:            match operator:                case ExecCondition.EQ:                    return key == value                case ExecCondition.NE:                    return key != value                case ExecCondition.IS_EMPTY:                    return key == "" or key is None                case ExecCondition.NOT_EMPTY:                    return key != "" or key is not None                case ExecCondition.RT:                    return key > value                case ExecCondition.LT:                    return key < value                case _:                    return False        except AssertionError as e:            return False    @property    def doc(self):        return f"条件判断 >> {self.key} {self.ASSERT_MAP[self.operator]} {self.value}"