#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/22# @Author : cyq# @File : execAssert# @Software: PyCharm# @Desc:from jmespath.exceptions import LexerErrorfrom enums.CaseEnum import ExtraEnum, AssertTargetEnumfrom utils import MyLoguru, JsonExtractfrom utils.assertsUtil import MyAssertsfrom httpx import Responsefrom typing import List, Mapping, Anyimport refrom json import JSONDecodeErrorlog = MyLoguru().get_logger()class ExecAsserts:    """    执行断言    """    err = {        "actual": None,        "result": False    }    def __init__(self, response: Response = None):        self.response = response    async def __call__(self, asserts_info: List[Mapping[str, Any]]):        """       [{'assert_opt': '==', 'assert_text': '$.code', 'assert_value': 'fjlksdjflksdjl', 'assert_target': 'status_code', 'assert_extract': 'jsonpath'},       {'assert_opt': '==', 'assert_text': '', 'assert_value': 'asd', 'assert_target': 'Response Json', 'assert_extract': 'jmespath'}]        """        log.debug(f"断言 {asserts_info}")        # order = ["string", "integer", "float", "bool", "object"]        # asserts_info = sorted(assertsInfo, key=lambda x: order.index(x["extraValueType"]))        asserts_result = []        for ass in asserts_info:            _assert_result = await self.invoke(**ass)            asserts_result.append({**ass, **_assert_result})        return asserts_result    async def invoke(self, assert_target: str, assert_extract: str, assert_opt: str, assert_value: Any,                     assert_text: str = None, **kwargs):        """        断言执行        :param assert_target 断言目标        :param assert_text 提取语法        :param assert_extract   提取方式        :param assert_opt   断言方法        :param assert_value     预期值        """        target = None        match assert_target:            case AssertTargetEnum.StatusCode:  # 状态码断言                return await self.assert_status_code(assert_opt, assert_value)            case AssertTargetEnum.ResponseText:  # 文本断言                return await self.assert_response_text(assert_opt, assert_value, assert_text, assert_extract)            case AssertTargetEnum.ResponseBody:  # body断言                return await self.assert_response_json(assert_opt, assert_value, assert_text, assert_extract)            case AssertTargetEnum.ResponseHeader:  # header断言                return await self.assert_response_header(assert_opt, assert_value, assert_text, assert_extract)    async def assert_status_code(self, assert_opt: str, assert_value: Any):        """        响应吗 断言        """        return await self.__assert(assert_opt, assert_value, self.response.status_code)    async def assert_response_text(self, assert_opt: str, assert_value: Any, assert_text: str, assert_extract: str):        """        响应 文本断言        assert_extract 只支持re 正则        """        if assert_extract != ExtraEnum.RE or not assert_text:            log.error(f"断言方法 {assert_extract} 不能对响应文本进行断言 或 断言语法为空！")            return        target = self.response.text        match = re.search(assert_text, target)        actual = match.group(1) if match else None        return self.__assert(assert_opt, assert_value, actual)    async def assert_response_json(self, assert_opt: str, assert_value: Any, assert_text: str, assert_extract: str):        """        响应 Json断言        参数提取只支持 jsonpath jmespath        """        if assert_extract not in [ExtraEnum.JMESPATH,ExtraEnum.JSONPATH] or not assert_text:            log.error(f"断言方法 {assert_extract} 不能对响应Json进行断言 或 断言语法为空！")            return self.err        try:            target = self.response.json()            actual = await self.__json_extract(target, assert_text, assert_extract)            return await self.__assert(assert_opt, assert_value, actual)        except Exception as e:            log.error(e)            return self.err    async def assert_response_header(self, assert_opt: str, assert_value: Any, assert_text: str, assert_extract: str):        """        响应 Header断言        参数提取只支持 jsonpath jmespath        """        if assert_extract != ExtraEnum.JSONPATH or assert_extract != ExtraEnum.JMESPATH or not assert_text:            log.error(f"断言方法 {assert_extract} 不能对响应Json进行断言 或 断言语法为空！")        try:            target = self.response.headers            actual = await self.__json_extract(target, assert_text, assert_extract)            return await self.__assert(assert_opt, assert_value, actual)        except JSONDecodeError:            log.warning(f"响应 {self.response.text} 非JSON 、无法提取")            target = None            return    @staticmethod    async def __assert(assert_opt: str, expect: Any, actual: Any):        _ = {            "actual": actual,            "result": False        }        try:            MyAsserts.option(assert_opt, expect, actual)            _['result'] = True            return _        except AssertionError as e:            log.error(e)            return _    @staticmethod    async def __json_extract(target: Any, assert_text: str, assert_extract: str):        log.debug(f"target 提取语法: {target}")        log.debug(f"assert_text 提取语法: {assert_text}")        log.debug(f"assert_extract 提取语法: {assert_extract}")        actual = None        jp = JsonExtract(target, assert_text)        match assert_extract:            case ExtraEnum.JSONPATH:                try:                    actual = await jp.value()                    log.debug(f"JSONPATH 提取结果: {actual}")                except JSONDecodeError:                    log.warning(f"JSONPATH 提取失败")                    actual = None            case ExtraEnum.JMESPATH:                try:                    actual = await jp.search()                    log.debug(f"JMESPATH 提取结果: {actual}")                except LexerError as e:                    log.warning(f"JMESPATH 提取失败")                    actual = "非法JMESPATH语法 或提取变量失败"        return actual