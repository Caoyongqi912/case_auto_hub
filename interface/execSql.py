#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/2/17# @Author : cyq# @File : execSql# @Software: PyCharm# @Desc:from typing import List, Dictfrom interface.io_sender import APISocketSenderfrom utils.mysqlClient import MySqlClientfrom utils import GenerateTools, log, MyJsonPathimport reSELECT_KEYWORDS = ("select", "SELECT")class ExecSql:    def __init__(self, io: APISocketSender, sql_Str: str, sql_extracts: List[Dict[str, str]] = None, ):        self._io = io        self._sql = re.sub(r'\s+', ' ', sql_Str).strip(";")        self._extract = sql_extracts        self.client = MySqlClient()    async def exec_sql(self):        """执行sql"""        # 暂时写死local        await self.client.set_default_pool()        result = {}        try:            if self._sql.startswith(SELECT_KEYWORDS):                keys = await self.__get_keys()                try:                    search_data = await self.client.fetch_all(self._sql)                    await self._io.send(f"Get Search Data {search_data}")                    if not search_data:                        return result                except Exception as e:                    await self._io.send(f"Fetch Sql Error: {e}")                    return None                # 如果没有将keys 赋值查到的第一个数据返回                first_data = search_data[0]                for key in keys:                    if first_data.get(key):                        result[key] = first_data.get(key)                # 如果有获取预期                if self._extract:                    for item in self._extract:                        j = MyJsonPath(search_data, item.get('jp'))                        value = await j.value()                        if value:                            result[item["key"]] = value                return result            else:                await self.client.execute(self._sql)                return None        except Exception as e:            log.error(e)            await self._io.send(f"Exec Sql Error: {e}")            return None        finally:            await self.client.close_pool()    async def __get_keys(self):        params = re.findall(r'select(.*?)from', self._sql, re.IGNORECASE)[0].strip().split(",")        keys = []        for i in params:            if " as " in i:                _ = i.split(" as ")[1]                keys.append(_.strip())            else:                keys.append(i.strip())        return keys