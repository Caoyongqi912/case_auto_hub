#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/22# @Author : cyq# @File : sender# @Software: PyCharm# @Desc:import asyncioimport jsonfrom typing import Any, Dict, List, TypeVarfrom httpx import Responsefrom app.mapper.interface import InterfaceGlobalHeaderMapperfrom app.model.interface import InterfaceModelfrom enums import InterfaceRequestTBodyTypeEnum, InterfaceRequestMethodEnumfrom utils import GenerateTools, MyLoguru, logfrom utils.fakerClient import FakerClientfrom utils.httpxClient import HttpxClientfrom .io_sender import APISocketSenderimport reLOG = MyLoguru().get_logger()Interface = TypeVar('Interface', bound=InterfaceModel)def filter_request_body(interface: Interface) -> Dict[str, Any] | None:    """判断请求体类型"""    match interface.body_type:        case InterfaceRequestTBodyTypeEnum.Null:            return None        case InterfaceRequestTBodyTypeEnum.Json:            if interface.body:                return {InterfaceRequestTBodyTypeEnum.JSON: interface.body}        case InterfaceRequestTBodyTypeEnum.Data:            if interface.data:                return {InterfaceRequestTBodyTypeEnum.FORM_DATA: GenerateTools.list2dict(                    interface.data                )}        case _:            return Noneclass HttpSender(HttpxClient):    def __init__(self, variables: Dict[str, Any], io: APISocketSender):        self.variables = variables        self.io = io        super().__init__(log=self.io.send)    async def __call__(self, url: str, interface: Interface, **kwargs) -> Response:        """        :param interface        :return:        """        _request_data = await self.set_req_info(interface)        url = await self.transform_target(target=url)        await self.io.send(f"Request INFO : {json.dumps(_request_data, ensure_ascii=False)}")        return await super().__call__(method=interface.method.lower(),                                      url=url,                                      **_request_data)    async def transform_target(self, target: Any):        """        参数转换        数据转换        """        # 如果单纯字符串        if isinstance(target, str):            return await self._transformStr(target)        # 如果是字典        if isinstance(target, dict):            return await self._transFormObj(target)        # 如果是列表        if isinstance(target, list):            return await self._transFormList(target)    async def _transformStr(self, target: str) -> str:        """        字符串替换        """        if target.startswith("{{") and target.endswith("}}"):            # 处理 {{$xx}} 格式变量            extractKey = target[2:-2]            if extractKey.startswith("$"):                extractKey = extractKey[1:]                f = FakerClient()                return f.value(extractKey)            return self.variables.get(extractKey, target)        else:            pattern = r"{{(.*?)}}"            return re.sub(pattern, lambda match: str(self.variables.get(match.group(1), match.group(0))), target)    async def _transFormObj(self, target: Dict[str, Any]) -> Dict[str, Any]:        """        字典替换        :param target        """        return {key: await self.transform_target(value) for key, value in target.items()}    async def _transFormList(self, target: List[Any]) -> List[Any]:        """        列表替换        """        return [await self.transform_target(item) for item in target]    async def set_req_info(self, interface: Interface):        """        处理请求信息        """        _request_data = dict()        _request_data[InterfaceRequestTBodyTypeEnum.HEADERS] = {}        # 查询全局headers        _headers = await InterfaceGlobalHeaderMapper.query_all()        if _headers:            for h in _headers:                _request_data[InterfaceRequestTBodyTypeEnum.HEADERS].update(h.map)        # 添加 自定义headers        if interface.headers:            _request_data[InterfaceRequestTBodyTypeEnum.HEADERS].update(                GenerateTools.list2dict(interface.headers)            )        # 如果GET请求 只处理params 数据        if interface.method == InterfaceRequestMethodEnum.GET:            if interface.params:                _request_data[InterfaceRequestTBodyTypeEnum.PARAMS] = GenerateTools.list2dict(interface.params)        else:            un_get_data = filter_request_body(interface)            if un_get_data:                _request_data.update(**un_get_data)        # 使用 asyncio.gather 提升并发性能        transform_tasks = [            self.transform_target(v) for v in _request_data.values()        ]        transformed_values = await asyncio.gather(*transform_tasks)        for i, (k, _) in enumerate(_request_data.items()):            _request_data[k] = transformed_values[i]        _request_data['follow_redirects'] = bool(interface.follow_redirects)        _request_data['read'] = interface.response_timeout        _request_data['connect'] = interface.connect_timeout        log.debug(_request_data)        return _request_data