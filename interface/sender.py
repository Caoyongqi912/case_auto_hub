#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/22# @Author : cyq# @File : sender# @Software: PyCharm# @Desc:import jsonfrom typing import Any, Dict, List, TypeVarfrom httpx import Responsefrom app.model.interface import InterfaceModelfrom enums import InterfaceRequestTBodyTypeEnum, InterfaceRequestMethodEnumfrom utils import GenerateTools, MyLoguru, logfrom utils.httpxClient import HttpxClientfrom .io_sender import APISocketSenderimport reLOG = MyLoguru().get_logger()Interface = TypeVar('Interface', bound=InterfaceModel)def filter_request_body(interface: Interface) -> Dict[str, Any] | None:    """判断请求体类型"""    match interface.body_type:        case InterfaceRequestTBodyTypeEnum.Null:            return None        case InterfaceRequestTBodyTypeEnum.Json:            if interface.body:                return {InterfaceRequestTBodyTypeEnum.JSON: interface.body}        case InterfaceRequestTBodyTypeEnum.Data:            if interface.data:                return {InterfaceRequestTBodyTypeEnum.FORM_DATA: GenerateTools.list2dict(                    interface.data                )}        case _:            return Noneclass HttpSender(HttpxClient):    def __init__(self, variables: Dict[str, Any], io: APISocketSender):        self.variables = variables        self.io = io        super().__init__(log=self.io.send)    async def __call__(self, url: str, interface: Interface, **kwargs) -> Response:        """        :param interface        :return:        """        _request_data = await self.set_req_info(interface)        url = await self.transform_target(target=url)        await self.io.send(f"Request INFO :{json.dumps(_request_data, ensure_ascii=False)}")        return await super().__call__(method=interface.method.lower(),                                      url=url,                                      **_request_data)    async def transform_target(self, target: Any):        """        参数转换        数据转换        """        # 如果单纯字符串        if isinstance(target, str):            return await self._transformStr(target)        # 如果是字典        if isinstance(target, dict):            return await self._transFormObj(target)        # 如果是列表        if isinstance(target, list):            return await self._transFormList(target)    async def _transformStr(self, target: str) -> str:        """        字符串替换        """        if target.startswith("{{") and target.endswith("}}"):            extractKey = target[2:-2]            if extractKey in self.variables:                newValue = self.variables[extractKey]                return newValue            else:                return target        else:            pattern = r"{{(.*?)}}"            newValue = re.sub(pattern, lambda match: str(self.variables.get(match.group(1), None)), target)            return newValue    async def _transFormObj(self, target: Dict[str, Any]) -> Dict[str, Any]:        """        字典替换        :param target        """        transformed_target = {}        for key, value in target.items():            # 如果value是字符串            if isinstance(value, str):                newValue = await self._transformStr(value)                transformed_target[key] = newValue            # 如果还是字典            elif isinstance(value, dict):                newObj = await self._transFormObj(value)                transformed_target[key] = newObj            # 如果是列表            elif isinstance(value, list):                newList = await self._transFormList(value)                transformed_target[key] = newList            else:                transformed_target[key] = value        return transformed_target    async def _transFormList(self, target: List[Any]) -> List[Any]:        """        列表替换        """        transformed_list = []        for i in target:            if isinstance(i, str):                newValue = await self._transformStr(i)                transformed_list.append(newValue)            elif isinstance(i, dict):                transformed_list.append(await self._transFormObj(i))            elif isinstance(i, list):                transformed_list.append(await self._transFormList(i))            else:                transformed_list.append(i)        return transformed_list    async def set_req_info(self, interface: Interface):        """            处理请求信息        """        _request_data = dict()        if interface.headers:            _request_data[InterfaceRequestTBodyTypeEnum.HEADERS] = GenerateTools.list2dict(interface.headers)        if interface.method == InterfaceRequestMethodEnum.GET:            if interface.params:                _request_data[InterfaceRequestTBodyTypeEnum.PARAMS] = GenerateTools.list2dict(interface.params)        else:            un_get_data = filter_request_body(interface)            if un_get_data:                _request_data.update(**un_get_data)        for k, v in _request_data.items():            _v = await self.transform_target(v)            _request_data[k] = _v        _request_data['follow_redirects'] = bool(interface.follow_redirects)        _request_data['read'] = interface.response_timeout        _request_data['connect'] = interface.connect_timeout        log.debug(_request_data)        return _request_data