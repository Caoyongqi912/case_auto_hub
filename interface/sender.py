#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/22# @Author : cyq# @File : sender# @Software: PyCharm# @Desc:from typing import Any, Dict, Listfrom httpx import Responsefrom app.model.interface import InterfaceModelfrom app.mapper.project.env import EnvMapperfrom utils import GenerateToolsfrom utils.httpxClient import HttpxClientimport reclass Sender(HttpxClient):    def __init__(self, variables: Dict[str, Any], log):        self.variables = variables        self.log = log        super().__init__()    async def __call__(self, interface: InterfaceModel, **kwargs) -> Response:        """        :param interface        :return:        """        _request_data = await self.set_req_info(interface)        domain = await self.set_req_url(interface)        return await super().__call__(method=interface.method.lower(),                                      url=domain,                                      **_request_data)    @staticmethod    async def set_req_url(interface: InterfaceModel):        env = await EnvMapper.get_by_id(ident=interface.env_id)        domain = env.host        if env.port:            domain += f":{env.port}"        return domain + interface.url    async def set_req_info(self, interface: InterfaceModel):        """处理请求信息"""        _request_data = dict(            timeout=interface.responseTimeout,        )        if interface.params:            _request_data["params"] = await GenerateTools.list2dict(interface.params)        if interface.headers:            _request_data["headers"] = await GenerateTools.list2dict(interface.headers)        if interface.data:            _request_data["data"] = await GenerateTools.list2dict(interface.data)        if interface.body:            _request_data["body"] = interface.body        for k, v in _request_data.items():            _request_data[k] = await self.transform_target(v)        self.log(f"request INFO :{_request_data}")        return _request_data    async def transform_target(self, target: Any):        """        参数转换        数据转换        """        # 如果单纯字符串        if isinstance(target, str):            return await self._transformStr(target)        # 如果是字典        if isinstance(target, dict):            return await self._transFormObj(target)        # 如果是列表        if isinstance(target, list):            return await self._transFormList(target)    async def _transformStr(self, target: str) -> str:        """        字符串替换        """        if target.startswith("{{") and target.endswith("}}"):            extractKey = target[2:-2]            if extractKey in self.variables:                newValue = self.variables[extractKey]                return newValue            else:                return target        # elif target.startswith("${"):        #     funcStr = re.findall(r"\$\{(.*?)\}", target)        #     if funcStr:        #         funcStr = funcStr[0]        #     ex = ExecFuncManager(funcStr, "KEY")        #     obj = ex.execFunc()        #     return obj.get("KEY")        else:            pattern = r"{{(.*?)}}"            newValue = re.sub(pattern, lambda match: str(self.variables.get(match.group(1), "")), target)            return newValue    async def _transFormObj(self, target: Dict[str, Any]) -> Dict[str, Any]:        """        字典替换        :param target        """        transformed_target = {}        for key, value in target.items():            # 如果value是字符串            if isinstance(value, str):                newValue = await self._transformStr(value)                transformed_target[key] = newValue            # 如果还是字典            elif isinstance(value, dict):                newObj = await self._transFormObj(value)                transformed_target[key] = newObj            # 如果是列表            elif isinstance(value, list):                newList = await self._transFormList(value)                transformed_target[key] = newList            else:                transformed_target[key] = value        return transformed_target    async def _transFormList(self, target: List[Any]) -> List[Any]:        """        列表替换        """        transformed_list = []        for i in target:            if isinstance(i, str):                newValue = await self._transformStr(i)                transformed_list.append(newValue)            elif isinstance(i, dict):                transformed_list.append(await self._transFormObj(i))            elif isinstance(i, list):                transformed_list.append(await self._transFormList(i))            else:                transformed_list.append(i)        return transformed_list