#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/19# @Author : cyq# @File : runner# @Software: PyCharm# @Desc:from typing import List, Dict, Anyfrom httpx import Response, ConnectErrorfrom app.controller.ui.ui_task import startfrom app.model.base import Userfrom app.model.interface import InterfaceModelfrom utils import MyLoguru, GenerateToolsfrom app.mapper.interface import InterfaceMapper, InterfaceCaseMapperfrom .execScript import ExecScriptForInterfacefrom .sender import Senderclass InterFaceRunner:    def __init__(self, starter: User):        self.starter = starter        self.variables = {}        self.log = MyLoguru().get_logger()        self.sender = Sender(self.variables, self.log)    async def set_variables(self, data: Dict[str, Any] | List[Dict[str, Any]]):        """        设置变量        :param data:        :return:        """        if isinstance(data, dict):            self.variables.update(**data)        elif isinstance(data, list):            _ = await GenerateTools.list2dict(data)            self.variables.update(**_)    async def try_interface(self, interfaceId: int):        """        执行单个接口请求调试        无变量、有前置方法、        需要返回response        """        interface = await InterfaceMapper.get_by_id(ident=interfaceId)        self.log.info(interface)        try:            response = await self.__execute_interface(interface)        except Exception as e:            self.log.exception(e)        return response    async def run_interCase(self, caseId: int):        """        执行接口用例        """        interfaces = await InterfaceCaseMapper.query_interface_by_caseId(caseId=caseId)        for index, interface in enumerate(interfaces, start=1):            self.log.info(f"step {index} : {interfaces}")            response = await self.__execute_interface(interface)            return    async def run_interTask(self, taskId: int):        pass    async def __execute_interface(self, interface: InterfaceModel):        """        API 执行        """        try:            # 1、前置变量参数            await self.__exec_before_params(interface.beforeParams)            # 2、执行前置函数            bs = await self.__exec_before_script(interface.beforeScript)            self.variables.update(**bs)            # 3、执行接口请求            response = await self.sender(interface)            self.log.debug(response.text)        except Exception as e:            self.log.exception(e)            raise e        # 4、进行断言        assertInfo = await self.__exec_assert(response, interface)        # 5、出参提取        extractInfo = await self.__exec_extract(response, interface)        # 6、执行后置函数        await self.__exec_after_script(response, interface.afterScript)        return "ok"    async def __exec_before_script(self, script: str):        if script:            exe = ExecScriptForInterface(funcStr=script, variables=self.variables, log=self.log)            return exe.exec_beforeFunc()        return {}    async def __exec_before_params(self, before_params: List[Dict[str, Any]] = None):        """处理前置参数"""        if before_params:            await self.set_variables(before_params)    async def __exec_after_script(self, response: Response, script: str):        ...    async def __exec_assert(self, response: Response, interface: InterfaceModel):        if not interface.asserts:            return    async def __exec_extract(self, response: Response, interface: InterfaceModel):        if not interface.extracts:            return