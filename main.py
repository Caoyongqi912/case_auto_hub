import asynciofrom app import hubfrom app.scheduler import Scheduler# @app.on_event("startup")# async def init_aps():#     """#     启动aps 任务#     :return:#     """#     from config import Config#     if Config.APS:#         aps = AsyncIOScheduler()#         await Scheduler.init(aps)#         # todo UI截图删除#         Scheduler.start()@hub.on_event("startup")async def init_db():    """    初始化数据库    :return:    """    from app.model import create_table    # ...    task = asyncio.create_task(create_table())    try:        await task    except Exception as e:        print(f"数据库表创建出现错误: {e}")        # 可以在这里添加更复杂的错误处理逻辑，比如尝试重新创建、记录错误日志、终止应用启动等@hub.on_event("shutdown")def shutdown_aps():    Scheduler.shutdown()