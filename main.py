import asynciofrom contextlib import asynccontextmanagerimport clickfrom apscheduler.schedulers.asyncio import AsyncIOSchedulerfrom fastapi import FastAPIfrom fastapi.exceptions import RequestValidationErrorfrom starlette.middleware.base import BaseHTTPMiddlewarefrom starlette.middleware.errors import ServerErrorMiddlewarefrom starlette.middleware.cors import CORSMiddlewarefrom app.middware import CORS_ALLOW_ORIGINS, req_middleware, error_middleware, validation_exception_handlerfrom app.controller import RegisterRouterListfrom app.scheduler import Schedulerfrom app.ws import async_io, asgi_appfrom utils import logfrom common import rcfrom config import Config@asynccontextmanagerasync def lifespanApp(_: FastAPI):    click.echo(Config.Banner)    await init_aps()    await init_redis()    await init_db()    await init_proxy()    await init_proxy()    yield    await shutdown_aps()    await rc.close_pool()def caseHub():    _hub = FastAPI(        title="CaseHub",        description="CaseAutoHub",        version="0.0.1",        lifespan=lifespanApp,    )    # 加载路由    for item in RegisterRouterList:        _hub.include_router(item.router)    # 参数校验捕获    _hub.add_exception_handler(        RequestValidationError,        handler=validation_exception_handler,    )    # 跨域    _hub.add_middleware(        CORSMiddleware,        **CORS_ALLOW_ORIGINS    )    # 请求日志    _hub.add_middleware(        BaseHTTPMiddleware,        dispatch=req_middleware,    )    # 全局异常捕获    _hub.add_middleware(        ServerErrorMiddleware,        handler=error_middleware,    )    _hub.mount("/ws", asgi_app)    _hub.sio = async_io    return _hubasync def init_aps():    """    启动aps 任务    :return:    """    from config import Config    if Config.APS:        aps = AsyncIOScheduler()        try:            await Scheduler.init(aps)            # todo UI截图删除            Scheduler.start()        except Exception as e:            log.error(f"apscheduler 启动失败: {e}")async def init_redis():    try:        await rc.init_pool()        log.info("redis 初始化链接完成...")    except Exception as e:        raise easync def init_db():    """    初始化数据库    :return:    """    from app.model import create_table    # ...    try:        asyncio.create_task(create_table())        log.info("数据库表创建链接完成...")    except Exception as e:        print(f"数据库表创建出现错误: {e}")async def init_proxy():    from config import Config    if Config.Record_Proxy:        try:            asyncio.create_task(start_proxy())            log.info("record 代理启动完成...")        except Exception as e:            log.error(f"record 代理启动失败: {e}")async def shutdown_aps():    Scheduler.shutdown()async def start_proxy():    from mitmproxy.tools.dump import DumpMaster    from mitmproxy import options    from interface.recoder import InterfaceRecoder    dm = DumpMaster(        options=options.Options(            listen_host="0.0.0.0",            listen_port=7777,        ),        with_termlog=False,        with_dumper=False,    )    dm.addons.add(InterfaceRecoder())    await dm.run()hub = caseHub()