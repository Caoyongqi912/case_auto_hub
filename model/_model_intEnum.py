from sqlalchemy.types import TypeDecorator, Integerfrom typing import TypeVar, Generic, Unionfrom enum import Enumfrom enums import BaseEnumeT = TypeVar("eT", bound=BaseEnum)class IntEnum(TypeDecorator):    impl = Integer    cache_ok = True    def __init__(self, enumType: Generic[eT], *args, **kwargs):        super().__init__(*args, **kwargs)        self.__enumType = enumType    def process_bind_param(self, value, dialect) -> Union[Enum, int]:        """        :param value:        :param dialect:        :return:        """        if isinstance(value, self.__enumType):            return value.value        else:            return value    def process_result_value(self, value, dialect):        """        :param value: Enum value        :param dialect:        :return: Enum name        """        e = self.__enumType(value)        return e.name