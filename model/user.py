#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : user# @Software: PyCharm# @Desc:from typing import List, Optionalfrom sqlalchemy import Column, INTEGER, String, Boolean, ForeignKeyfrom sqlalchemy.orm import relationship, Mapped, mapped_column, column_propertyfrom model.basic import BaseModelfrom model._model_intEnum import IntEnumfrom enums import GenderEnumfrom werkzeug.security import generate_password_hash, check_password_hashclass UserTag(BaseModel):    __tablename__ = "userTag"    name: Mapped[str] = Column(String(20), unique=True, comment="标签名称")    departmentID: Mapped[int] = Column(INTEGER,                                       ForeignKey("department.id", ondelete="CASCADE"),                                       nullable=True,                                       comment="所属部门")    department: Mapped["UserDepartment"] = relationship(back_populates="tags")    def __repr__(self):        return f"<{UserTag.__name__} {self.name}>"class UserDepartment(BaseModel):    __tablename__ = "department"    name: Mapped[str] = Column(String(20), unique=True, comment="用户名")    desc: Mapped[str | None] = Column(String(40), nullable=True, comment="部门描述")    adminID: Mapped[int | None] = Column(INTEGER, nullable=True, comment="部门负责人")    adminName: Mapped[str | None] = Column(String(10), nullable=True, comment="部门负责人名称")    structure: Mapped[int] = Column(INTEGER, default=0, comment="构造统计")    users: Mapped[List['User']] = relationship(back_populates="department", lazy="dynamic")    tags: Mapped[List['UserTag']] = relationship(back_populates="department",                                                 cascade="all,delete",                                                 lazy="dynamic")  # 级联删除    def __repr__(self):        return f"<{UserDepartment.__name__} {self.name}>"class User(BaseModel):    __tablename__ = "user"    username: Mapped[str] = mapped_column(String(20), comment="用户名")    phone: Mapped[str] = mapped_column(String(12), unique=True, comment="手机")    password: Mapped[str] = mapped_column(String(200), comment="密码")    email: Mapped[str] = mapped_column(String(50), unique=True, comment="邮箱")    gender: Mapped[GenderEnum] = mapped_column(IntEnum(GenderEnum), comment="性别")    avatar: Mapped[str] = mapped_column(String(400), nullable=True, comment="头像")    isAdmin: Mapped[bool] = mapped_column(Boolean, default=False, comment="管理")    tagName: Mapped[str] = mapped_column(String(20), nullable=True, comment="对应标签名称")    departmentID: Mapped[Optional[int]] = mapped_column(ForeignKey("department.id", ondelete="set null"),                                                        comment="所属部门ID")    departmentName: Mapped[str | None] = mapped_column(String(20), nullable=True,                                                       comment="对应标签名称")    department: Mapped["UserDepartment"] = relationship(back_populates="users")    @staticmethod    def set_password(password: str):        password = generate_password_hash(password)        return password    def __repr__(self):        return f"<{User.__name__} {self.username}>"